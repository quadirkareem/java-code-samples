
3
0.OverviewPackageClassUseTreeDeprecatedIndexHelp

1Java™

2Platform

3Standard

4Ed.

57
	
6Prev

7	ClassNext

8ClassFramesNo

9FramesSummary:

10Nested

11|

12Field

13|

14Constr

15|

16MethodDetail:

17Field

18|

19Constr

20|

21Method

22java.io

23Class

24ObjectInputStream

25java.lang.Object

26java.io.InputStream

27java.io.ObjectInputStream
	
28All

29Implemented

30Interfaces:

31
Closeable,

32
DataInput,

33ObjectInput,

34ObjectStreamConstants,

35AutoCloseable

36public

37class

38ObjectInputStream

39extends

40InputStream

41
implements

42ObjectInput,

43ObjectStreamConstants

44An

45ObjectInputStream

46deserializes

47	primitive


48data
	
49and

50objects

51
previously

52written

53using

54an

55ObjectOutputStream.

56ObjectOutputStream
	
57and

58ObjectInputStream
	
59can

60provide

61an

62application


63with

64
persistent

65storage
	
66for

67graphs

68of

69objects


70when


71used


72with

73a

74FileOutputStream
	
75and

76FileInputStream

77respectively.

78ObjectInputStream

79is


80used

81to

82recover

83those

84objects

85
previously

86serialized.

87Other


88uses

89include

90passing

91objects

92between

93hosts

94using

95a

96socket

97stream

98or
	
99for

100
marshaling


101and

102unmarshaling

103	arguments


104and

105
parameters
	
106in

107a

108remote

109communication

110system.

111ObjectInputStream

112ensures

113that


114the

115types
	
116of


117all

118objects
	
119in


120the

121graph

122created

123from


124the

125stream

126match


127the

128classes

129present
	
130in


131the

132Java

133Virtual

134Machine.

135Classes


136are

137loaded
	
138as

139required

140using


141the

142standard

143mechanisms.

144Only

145objects

146that

147support


148the

149java.io.Serializable
	
150or

151java.io.Externalizable

152	interface


153can
	
154be

155read

156from

157streams.


158The

159method

160
readObject
	
161is

162used
	
163to

164read
	
165an

166object

167from


168the

169stream.

170Java's

171safe

172casting

173should
	
174be

175used
	
176to


177get


178the

179desired

180type.
	
181In

182Java,

183strings


184and

185arrays


186are

187objects


188and


189are

190treated
	
191as

192objects

193during

194serialization.

195When

196read

197they

198need
	
199to
	
200be

201cast
	
202to


203the

204expected

205type.

206	Primitive

207data

208types


209can
	
210be

211read

212from


213the

214stream

215using


216the

217appropriate

218method
	
219on

220
DataInput.


221The

222default

223deserialization

224	mechanism


225for

226objects

227restores


228the

229contents
	
230of

231each

232field
	
233to


234the

235value


236and

237type
	
238it


239had

240when
	
241it


242was

243written.

244Fields

245declared
	
246as

247	transient
	
248or

249static


250are

251ignored
	
252by


253the

254deserialization

255process.

256
References
	
257to

258other

259objects

260cause

261those

262objects
	
263to
	
264be

265read

266from


267the

268stream
	
269as

270
necessary.

271Graphs
	
272of

273objects


274are

275restored

276	correctly

277using

278a

279	reference

280sharing

281
mechanism.


282New

283objects


284are

285always

286	allocated

287when

288deserializing,

289which

290prevents

291existing

292objects

293from

294being

295overwritten.

296Reading
	
297an

298object
	
299is

300	analogous
	
301to

302running


303the

304constructors
	
305of

306a


307new

308object.

309Memory
	
310is

311	allocated


312for


313the

314object


315and

316initialized
	
317to

318zero

319(NULL).

320No-arg

321constructors


322are

323invoked


324for


325the

326non-serializable

327classes


328and

329then


330the

331fields
	
332of


333the

334serializable

335classes


336are

337restored

338from


339the

340stream

341starting

342with


343the

344serializable

345class

346closest
	
347to

348java.lang.object


349and

350	finishing

351with


352the

353object's

354most

355specific

356class.


357For

358example
	
359to

360read

361from

362a

363stream
	
364as

365written
	
366by


367the

368example
	
369in

370ObjectOutputStream:

371FileInputStream


372fis

373=


374new
 
375FileInputStream("t.tmp");

376ObjectInputStream


377ois

378=


379new

380ObjectInputStream(fis);


381int

382i

383=

384ois.readInt();

385String

386today

387=

388(String)

389ois.readObject();

390Date

391date

392=

393(Date)

394ois.readObject();

395ois.close();

396Classes

397control


398how

399they


400are

401
serialized
	
402by

403implementing

404either


405the

406java.io.Serializable
	
407or

408java.io.Externalizable

409interfaces.

410Implementing


411the

412Serializable

413	interface

414allows

415object

416serialization
	
417to

418save


419and

420restore


421the

422entire

423state
	
424of


425the

426object


427and
	
428it

429allows

430classes
	
431to

432evolve

433between


434the

435time


436the

437stream
	
438is

439written


440and


441the

442time
	
443it
	
444is

445read.
	
446It

447automatically

448	traverses

449
references

450between

451objects,

452saving


453and

454	restoring

455entire

456graphs.

457Serializable

458classes

459that

460require

461special

462handling

463during


464the

465serialization


466and

467deserialization

468process

469should

470	implement


471the

472	following

473methods:

474private

475void
-
476&writeObject(java.io.ObjectOutputStream

477stream)

478throws

479IOException;

480private

481void
+
482$readObject(java.io.ObjectInputStream

483stream)

484throws

485IOException,

486ClassNotFoundException;

487private

488void

489readObjectNoData()

490throws

491ObjectStreamException;


492The

493
readObject

494method
	
495is

496responsible


497for

498reading


499and

500	restoring


501the

502state
	
503of


504the

505object


506for


507its

508
particular

509class

510using

511data

512written
	
513to


514the

515stream
	
516by


517the

518corresponding

519writeObject

520method.


521The

522method

523does


524not

525need
	
526to

527concern

528itself

529with


530the

531state

532	belonging
	
533to


534its

535superclasses
	
536or

537subclasses.

538State
	
539is

540restored
	
541by

542reading

543data

544from


545the

546ObjectInputStream


547for


548the

549
individual

550fields


551and

552making

553assignments
	
554to


555the

556appropriate

557fields
	
558of


559the

560object.

561Reading

562	primitive

563data

564types
	
565is

566	supported
	
567by

568
DataInput.


569Any

570attempt
	
571to

572read

573object

574data

575which

576exceeds


577the

578
boundaries
	
579of


580the

581custom

582data

583written
	
584by


585the

586corresponding

587writeObject

588method

589will

590cause
	
591an

592OptionalDataException
	
593to
	
594be

595thrown

596with
	
597an


598eof

599field

600value
	
601of

602true.

603
Non-object

604reads

605which

606exceed


607the


608end
	
609of


610the

611allotted

612data

613will

614reflect


615the


616end
	
617of

618data
	
619in


620the

621same


622way

623that

624they

625would

626indicate


627the


628end
	
629of


630the

631stream:

632bytewise

633reads

634will

635return
	
636-1
	
637as


638the

639byte

640read
	
641or

642number
	
643of

644bytes

645read,


646and

647	primitive

648reads

649will

650throw

651EOFExceptions.
	
652If

653there
	
654is
	
655no

656corresponding

657writeObject

658method,

659then


660the


661end
	
662of

663default

664
serialized

665data

666marks


667the


668end
	
669of


670the

671allotted

672data.

673	Primitive


674and

675object

676read

677calls

678issued

679from

680within

681a

682readExternal

683method

684behave
	
685in


686the

687same

688
manner--if


689the

690stream
	
691is

692already

693
positioned
	
694at


695the


696end
	
697of

698data

699written
	
700by


701the

702corresponding

703writeExternal

704method,

705object

706reads

707will

708throw

709OptionalDataExceptions

710with


711eof


712set
	
713to

714true,

715bytewise

716reads

717will

718return


719-1,


720and

721	primitive

722reads

723will

724throw

725EOFExceptions.

726Note

727that

728this

729behavior

730does


731not

732hold


733for

734streams

735written

736with


737the


738old
/
739(ObjectStreamConstants.PROTOCOL_VERSION_1

740	protocol,
	
741in

742which


743the


744end
	
745of

746data

747written
	
748by

749writeExternal

750methods
	
751is


752not

753demarcated,


754and

755hence

756cannot
	
757be

758	detected.


759The

760readObjectNoData

761method
	
762is

763responsible


764for

765initializing


766the

767state
	
768of


769the

770object


771for


772its

773
particular

774class
	
775in


776the

777event

778that


779the

780serialization

781stream

782does


783not

784list


785the

786given

787class
	
788as

789a

790
superclass
	
791of


792the

793object

794being

795deserialized.

796This


797may

798occur
	
799in

800cases

801where


802the

803	receiving

804party

805uses

806a

807	different

808version
	
809of


810the

811deserialized

812
instance's

813class

814than


815the

816sending

817party,


818and


819the

820
receiver's

821version

822extends

823classes

824that


825are


826not

827extended
	
828by


829the

830sender's

831version.

832This


833may

834also

835occur
	
836if


837the

838serialization

839stream


840has

841been

842	tampered;

843hence,

844readObjectNoData
	
845is

846useful


847for

848initializing

849deserialized

850objects

851properly

852despite

853a

854	"hostile"
	
855or

856
incomplete

857source

858stream.

859Serialization

860does


861not

862read
	
863or

864assign

865values
	
866to


867the

868fields
	
869of


870any

871object

872that

873does


874not

875	implement


876the

877java.io.Serializable

878
interface.

879
Subclasses
	
880of

881Objects

882that


883are


884not

885serializable


886can
	
887be

888serializable.
	
889In

890this

891case


892the

893non-serializable

894class

895must

896have

897a

898no-arg

899constructor
	
900to

901allow


902its

903fields
	
904to
	
905be

906initialized.
	
907In

908this

909case
	
910it
	
911is


912the

913responsibility
	
914of


915the

916subclass
	
917to

918save


919and

920restore


921the

922state
	
923of


924the

925non-serializable

926class.
	
927It
	
928is

929
frequently


930the

931case

932that


933the

934fields
	
935of

936that

937class


938are

939
accessible

940(public,

941package,
	
942or

943
protected)
	
944or

945that

946there


947are


948get


949and


950set

951methods

952that


953can
	
954be

955used
	
956to

957restore


958the

959state.


960Any

961	exception

962that

963occurs

964while

965deserializing
	
966an

967object

968will
	
969be

970caught
	
971by


972the

973ObjectInputStream


974and

975abort


976the

977reading

978process.

979Implementing


980the

981Externalizable

982	interface

983allows


984the

985object
	
986to

987assume

988complete

989control

990over


991the

992contents


993and

994format
	
995of


996the

997object's

998
serialized

999form.

1000The

1001methods


1002of

1003the

1004Externalizable

1005
interface,

1006writeExternal

1007and

1008readExternal,

1009are

1010called


1011to

1012save

1013and

1014restore

1015the

1016objects

1017state.

1018When

1019implemented


1020by
	
1021a

1022class

1023they

1024can

1025write

1026and

1027read

1028their

1029own

1030state

1031using

1032all


1033of

1034the

1035methods


1036of

1037ObjectOutput

1038and

1039ObjectInput.


1040It


1041is

1042the

1043responsibility


1044of

1045the

1046objects


1047to

1048handle

1049any

1050
versioning

1051that

1052occurs.

1053Enum

1054	constants

1055are

1056deserialized

1057differently

1058than

1059ordinary

1060serializable


1061or

1062externalizable

1063objects.

1064The

1065
serialized

1066form


1067of


1068an

1069enum

1070constant

1071consists

1072solely


1073of

1074its

1075name;

1076field

1077values


1078of

1079the

1080constant

1081are

1082not

1083transmitted.


1084To

1085deserialize


1086an

1087enum

1088	constant,

1089ObjectInputStream

1090reads

1091the

1092constant

1093name

1094from

1095the

1096stream;

1097the

1098deserialized

1099constant


1100is

1101then

1102obtained


1103by

1104calling

1105the

1106static

1107method

1108Enum.valueOf(Class,

1109String)

1110with

1111the

1112enum

1113
constant's

1114base

1115type

1116and

1117the

1118received

1119constant

1120name


1121as

1122
arguments.

1123Like

1124other

1125serializable


1126or

1127externalizable

1128objects,

1129enum

1130	constants

1131can

1132function


1133as

1134the

1135targets


1136of

1137back

1138
references

1139	appearing

1140subsequently


1141in

1142the

1143serialization

1144stream.

1145The

1146process


1147by

1148which

1149enum

1150	constants

1151are

1152deserialized

1153cannot


1154be

1155customized:

1156any

1157class-specific

1158readObject,

1159readObjectNoData,

1160and

1161readResolve

1162methods

1163defined


1164by

1165enum

1166types

1167are

1168ignored

1169during

1170deserialization.

1171
Similarly,

1172any

1173serialPersistentFields


1174or

1175serialVersionUID

1176field

1177declarations

1178are

1179also

1180ignored--all

1181enum

1182types

1183have
	
1184a

1185fixed

1186serialVersionUID


1187of

11880L.

1189Since:

1190JDK1.1

1191See

1192Also:

1193
DataInput,

1194ObjectOutputStream,

1195Serializable,

1196Object

1197Serialization

1198Specification,

1199Section


12003,

1201Object

1202Input

1203Classes

1204Nested

1205Class

1206Summary

1207Nested

1208Classes

1209Modifier

1210and

1211Type

1212Class

1213and

1214Description

1215static

1216class
"
1217ObjectInputStream.GetField

1218Provide

1219access


1220to

1221the

1222
persistent

1223fields

1224read

1225from

1226the

1227input

1228stream.

1229Field

1230Summary

1231Fields

1232	inherited

1233from

1234	interface
%
1235java.io.ObjectStreamConstants

1236baseWireHandle,

1237PROTOCOL_VERSION_1,

1238PROTOCOL_VERSION_2,

1239SC_BLOCK_DATA,

1240SC_ENUM,

1241SC_EXTERNALIZABLE,

1242SC_SERIALIZABLE,

1243SC_WRITE_METHOD,

1244STREAM_MAGIC,

1245STREAM_VERSION,
+
1246#SUBCLASS_IMPLEMENTATION_PERMISSION,
 
1247SUBSTITUTION_PERMISSION,

1248	TC_ARRAY,

1249TC_BASE,

1250TC_BLOCKDATA,

1251TC_BLOCKDATALONG,

1252	TC_CLASS,

1253TC_CLASSDESC,

1254TC_ENDBLOCKDATA,

1255TC_ENUM,

1256TC_EXCEPTION,

1257TC_LONGSTRING,

1258TC_MAX,

1259TC_NULL,

1260
TC_OBJECT,

1261TC_PROXYCLASSDESC,

1262TC_REFERENCE,

1263	TC_RESET,

1264	TC_STRING

1265Constructor

1266Summary

1267Constructors

1268Modifier

1269Constructor

1270and

1271Description

1272	protected

1273ObjectInputStream()

1274Provide
	
1275a

1276way

1277for

1278
subclasses

1279that

1280are

1281
completely

1282reimplementing

1283ObjectInputStream


1284to

1285not

1286have


1287to

1288allocate

1289private

1290data

1291just

1292used


1293by

1294this

1295implementation


1296of

1297ObjectInputStream.
%
1298ObjectInputStream(InputStream

1299in)

1300Creates


1301an

1302ObjectInputStream

1303that

1304reads

1305from

1306the

1307	specified

1308InputStream.

1309Method

1310Summary

1311Methods

1312Modifier

1313and

1314Type

1315Method

1316and

1317Description

1318int

1319available()

1320Returns

1321the

1322number


1323of

1324bytes

1325that

1326can


1327be

1328read

1329without

1330	blocking.

1331void

1332close()

1333Closes

1334the

1335input

1336stream.

1337void

1338defaultReadObject()

1339Read

1340the

1341
non-static

1342and

1343non-transient

1344fields


1345of

1346the

1347current

1348class

1349from

1350this

1351stream.

1352	protected

1353boolean
#
1354enableResolveObject(boolean

1355enable)

1356Enable

1357the

1358stream


1359to

1360allow

1361objects

1362read

1363from

1364the

1365stream


1366to


1367be

1368	replaced.

1369int

1370read()

1371Reads
	
1372a

1373byte


1374of

1375data.

1376int

1377read(byte[]

1378buf,

1379int

1380off,

1381int

1382len)

1383Reads

1384into


1385an

1386array


1387of

1388bytes.

1389boolean

1390readBoolean()

1391Reads


1392in
	
1393a

1394boolean.

1395byte

1396
readByte()

1397Reads


1398an
	
13998

1400bit

1401byte.

1402char

1403
readChar()

1404Reads
	
1405a


140616

1407bit

1408char.

1409	protected

1410ObjectStreamClass

1411readClassDescriptor()

1412Read
	
1413a

1414class

1415
descriptor

1416from

1417the

1418serialization

1419stream.

1420double

1421readDouble()

1422Reads
	
1423a


142464

1425bit

1426double.
"
1427ObjectInputStream.GetField

1428readFields()

1429Reads

1430the

1431
persistent

1432fields

1433from

1434the

1435stream

1436and

1437makes

1438them

1439	available


1440by

1441name.

1442float

1443readFloat()

1444Reads
	
1445a


144632

1447bit

1448float.

1449void

1450readFully(byte[]

1451buf)

1452Reads

1453bytes,

1454blocking

1455until

1456all

1457bytes

1458are

1459read.

1460void

1461readFully(byte[]

1462buf,

1463int

1464off,

1465int

1466len)

1467Reads

1468bytes,

1469blocking

1470until

1471all

1472bytes

1473are

1474read.

1475int

1476	readInt()

1477Reads
	
1478a


147932

1480bit

1481int.

1482String

1483
readLine()

1484Deprecated.

1485This

1486method

1487does

1488not

1489properly

1490convert

1491bytes


1492to

1493characters.

1494see

1495DataInputStream

1496for

1497the

1498details

1499and

1500alternatives.

1501long

1502
readLong()

1503Reads
	
1504a


150564

1506bit

1507long.

1508Object

1509readObject()

1510Read


1511an

1512object

1513from

1514the

1515ObjectInputStream.

1516	protected

1517Object

1518readObjectOverride()

1519This

1520method


1521is

1522called


1523by

1524trusted

1525
subclasses


1526of

1527ObjectOutputStream

1528that

1529constructed

1530ObjectOutputStream

1531using

1532the

1533	protected

1534no-arg

1535constructor.

1536short

1537readShort()

1538Reads
	
1539a


154016

1541bit

1542short.

1543	protected

1544void

1545readStreamHeader()

1546The

1547readStreamHeader

1548method


1549is

1550provided


1551to

1552allow

1553
subclasses


1554to

1555read

1556and

1557verify

1558their

1559own

1560stream

1561headers.

1562Object

1563readUnshared()

1564Reads


1565an

1566
"unshared"

1567object

1568from

1569the

1570ObjectInputStream.

1571int

1572readUnsignedByte()

1573Reads


1574an

1575unsigned
	
15768

1577bit

1578byte.

1579int

1580readUnsignedShort()

1581Reads


1582an

1583unsigned


158416

1585bit

1586short.

1587String

1588	readUTF()

1589Reads
	
1590a

1591String


1592in

1593modified

1594UTF-8

1595format.

1596void
0
1597(registerValidation(ObjectInputValidation

1598obj,

1599int

1600prio)

1601Register


1602an

1603object


1604to


1605be

1606	validated

1607before

1608the

1609graph


1610is

1611	returned.

1612	protected

1613Class<?>
&
1614resolveClass(ObjectStreamClass

1615desc)

1616Load

1617the

1618local

1619class

1620
equivalent


1621of

1622the

1623	specified

1624stream

1625class

1626description.

1627	protected

1628Object

1629resolveObject(Object

1630obj)

1631This

1632method

1633will

1634allow

1635trusted

1636
subclasses


1637of

1638ObjectInputStream


1639to

1640
substitute

1641one

1642object

1643for

1644another

1645during

1646deserialization.

1647	protected

1648Class<?>
"
1649resolveProxyClass(String[]

1650interfaces)

1651Returns
	
1652a

1653proxy

1654class

1655that

1656
implements

1657the

1658
interfaces

1659named


1660in
	
1661a

1662proxy

1663class

1664descriptor;

1665
subclasses

1666may

1667	implement

1668this

1669method


1670to

1671read

1672custom

1673data

1674from

1675the

1676stream

1677along

1678with

1679the

1680descriptors

1681for

1682dynamic

1683proxy

1684classes,

1685allowing

1686them


1687to

1688use


1689an

1690	alternate

1691loading

1692	mechanism

1693for

1694the

1695
interfaces

1696and

1697the

1698proxy

1699class.

1700int

1701skipBytes(int

1702len)

1703Skips

1704bytes.

1705Methods

1706	inherited

1707from

1708class

1709java.io.InputStream

1710mark,

1711markSupported,

1712read,

1713reset,

1714skip

1715Methods

1716	inherited

1717from

1718class

1719java.lang.Object

1720clone,

1721equals,

1722	finalize,

1723	getClass,

1724	hashCode,

1725notify,

1726
notifyAll,

1727	toString,

1728wait,

1729wait,

1730wait

1731Methods

1732	inherited

1733from

1734	interface

1735java.io.ObjectInput

1736read,

1737skip

1738Constructor

1739Detail

1740ObjectInputStream

1741public
%
1742ObjectInputStream(InputStream

1743in)

1744throws

1745IOException

1746Creates


1747an

1748ObjectInputStream

1749that

1750reads

1751from

1752the

1753	specified

1754InputStream.
	
1755A

1756serialization

1757stream

1758header


1759is

1760read

1761from

1762the

1763stream

1764and

1765	verified.

1766This

1767constructor

1768will

1769block

1770until

1771the

1772corresponding

1773ObjectOutputStream

1774has

1775written

1776and

1777flushed

1778the

1779header.


1780If
	
1781a

1782security

1783manager


1784is

1785
installed,

1786this

1787constructor

1788will

1789check

1790for

1791the
&
1792"enableSubclassImplementation"

1793SerializablePermission

1794when

1795invoked

1796directly


1797or

1798
indirectly


1799by

1800the

1801constructor


1802of
	
1803a

1804subclass

1805which

1806	overrides

1807the
$
1808ObjectInputStream.readFields


1809or
&
1810ObjectInputStream.readUnshared

1811methods.

1812Parameters:


1813in
	
1814-

1815input

1816stream


1817to

1818read

1819from

1820Throws:
 
1821StreamCorruptedException
	
1822-


1823if

1824the

1825stream

1826header


1827is

1828	incorrect

1829IOException
	
1830-


1831if


1832an

1833I/O

1834error

1835occurs

1836while

1837reading

1838stream

1839header

1840SecurityException
	
1841-


1842if

1843	untrusted

1844subclass

1845	illegally

1846	overrides

1847security-sensitive

1848methods

1849NullPointerException
	
1850-


1851if


1852in


1853is

1854null

1855See

1856Also:

1857ObjectInputStream(),

1858readFields(),
;
18593ObjectOutputStream.ObjectOutputStream(OutputStream)

1860ObjectInputStream

1861	protected

1862ObjectInputStream()

1863throws

1864IOException,

1865SecurityException

1866Provide
	
1867a

1868way

1869for

1870
subclasses

1871that

1872are

1873
completely

1874reimplementing

1875ObjectInputStream


1876to

1877not

1878have


1879to

1880allocate

1881private

1882data

1883just

1884used


1885by

1886this

1887implementation


1888of

1889ObjectInputStream.


1890If

1891there


1892is
	
1893a

1894security

1895manager

1896
installed,

1897this

1898method

1899first

1900calls

1901the

1902security

1903	manager's

1904checkPermission

1905method

1906with

1907the
>
19086SerializablePermission("enableSubclassImplementation")

1909
permission


1910to

1911ensure

1912it's


1913ok


1914to

1915enable

1916subclassing.

1917Throws:

1918SecurityException
	
1919-


1920if
	
1921a

1922security

1923manager

1924exists

1925and

1926its

1927checkPermission

1928method

1929denies

1930enabling

1931subclassing.

1932IOException

1933See

1934Also:
B
1935:SecurityManager.checkPermission(java.security.Permission),

1936SerializablePermission

1937Method

1938Detail

1939
readObject

1940public

1941final

1942Object

1943readObject()

1944throws

1945IOException,

1946ClassNotFoundException

1947Read


1948an

1949object

1950from

1951the

1952ObjectInputStream.

1953The

1954class


1955of

1956the

1957object,

1958the

1959	signature


1960of

1961the

1962class,

1963and

1964the

1965values


1966of

1967the

1968non-transient

1969and

1970
non-static

1971fields


1972of

1973the

1974class

1975and

1976all


1977of

1978its

1979
supertypes

1980are

1981read.

1982Default

1983deserializing

1984for
	
1985a

1986class

1987can


1988be

1989	overriden

1990using

1991the

1992writeObject

1993and

1994
readObject

1995methods.

1996Objects

1997
referenced


1998by

1999this

2000object

2001are

2002read

2003transitively


2004so

2005that
	
2006a

2007complete

2008
equivalent

2009graph


2010of

2011objects


2012is

2013reconstructed


2014by

2015readObject.

2016The

2017root

2018object


2019is

2020
completely

2021restored

2022when

2023all


2024of

2025its

2026fields

2027and

2028the

2029objects


2030it

2031
references

2032are

2033
completely

2034	restored.


2035At

2036this

2037point

2038the

2039object

2040
validation

2041	callbacks

2042are

2043executed


2044in

2045order

2046based


2047on

2048their

2049
registered

2050priorities.

2051The

2052	callbacks

2053are

2054
registered


2055by

2056objects

2057(in

2058the

2059
readObject

2060special

2061methods)


2062as

2063they

2064are

2065individually

2066	restored.

2067
Exceptions

2068are

2069thrown

2070for

2071problems

2072with

2073the

2074InputStream

2075and

2076for

2077classes

2078that

2079should

2080not


2081be

2082deserialized.

2083All

2084
exceptions

2085are

2086fatal


2087to

2088the

2089InputStream

2090and

2091leave


2092it


2093in


2094an

2095indeterminate

2096state;


2097it


2098is


2099up


2100to

2101the

2102caller


2103to

2104ignore


2105or

2106recover

2107the

2108stream

2109state.

2110	Specified

2111by:

2112
readObject


2113in

2114	interface

2115ObjectInput

2116Returns:

2117the

2118object

2119read

2120from

2121the

2122stream

2123Throws:

2124ClassNotFoundException
	
2125-

2126Class


2127of
	
2128a

2129
serialized

2130object

2131cannot


2132be

2133found.

2134InvalidClassException
	
2135-

2136	Something


2137is

2138wrong

2139with
	
2140a

2141class

2142used


2143by

2144serialization.
 
2145StreamCorruptedException
	
2146-

2147Control

2148information


2149in

2150the

2151stream


2152is

2153inconsistent.

2154OptionalDataException
	
2155-

2156	Primitive

2157data

2158was

2159found


2160in

2161the

2162stream

2163instead


2164of

2165objects.

2166IOException
	
2167-

2168Any


2169of

2170the

2171usual

2172Input/Output

2173related

2174exceptions.

2175readObjectOverride

2176	protected

2177Object

2178readObjectOverride()

2179throws

2180IOException,

2181ClassNotFoundException

2182This

2183method


2184is

2185called


2186by

2187trusted

2188
subclasses


2189of

2190ObjectOutputStream

2191that

2192constructed

2193ObjectOutputStream

2194using

2195the

2196	protected

2197no-arg

2198constructor.

2199The

2200subclass


2201is

2202expected


2203to

2204provide


2205an

2206override

2207method

2208with

2209the

2210modifier

2211"final".

2212Returns:

2213the

2214Object

2215read

2216from

2217the

2218stream.

2219Throws:

2220ClassNotFoundException
	
2221-

2222Class

2223
definition


2224of
	
2225a

2226
serialized

2227object

2228cannot


2229be

2230found.

2231OptionalDataException
	
2232-

2233	Primitive

2234data

2235was

2236found


2237in

2238the

2239stream

2240instead


2241of

2242objects.

2243IOException
	
2244-


2245if

2246I/O

2247errors

2248occurred

2249while

2250reading

2251from

2252the

2253
underlying

2254stream

2255Since:

22561.2

2257See

2258Also:

2259ObjectInputStream(),

2260readObject()

2261readUnshared

2262public

2263Object

2264readUnshared()

2265throws

2266IOException,

2267ClassNotFoundException

2268Reads


2269an

2270
"unshared"

2271object

2272from

2273the

2274ObjectInputStream.

2275This

2276method


2277is

2278	identical


2279to

2280readObject,

2281except

2282that


2283it

2284prevents

2285
subsequent

2286calls


2287to

2288
readObject

2289and

2290readUnshared

2291from

2292	returning

2293
additional

2294
references


2295to

2296the

2297deserialized

2298instance

2299obtained

2300via

2301this

2302call.

2303Specifically:


2304If

2305readUnshared


2306is

2307called


2308to

2309deserialize
	
2310a

2311back-reference

2312(the

2313stream

2314representation


2315of


2316an

2317object

2318which

2319has

2320been

2321written

2322
previously


2323to

2324the

2325stream),


2326an

2327ObjectStreamException

2328will


2329be

2330thrown.


2331If

2332readUnshared

2333returns

2334successfully,

2335then

2336any

2337
subsequent

2338attempts


2339to

2340deserialize

2341back-references


2342to

2343the

2344stream

2345handle

2346deserialized


2347by

2348readUnshared

2349will

2350cause


2351an

2352ObjectStreamException


2353to


2354be

2355thrown.

2356Deserializing


2357an

2358object

2359via

2360readUnshared

2361invalidates

2362the

2363stream

2364handle

2365
associated

2366with

2367the

2368returned

2369object.

2370Note

2371that

2372this


2373in

2374itself

2375does

2376not

2377always

2378	guarantee

2379that

2380the

2381	reference

2382returned


2383by

2384readUnshared


2385is

2386unique;

2387the

2388deserialized

2389object

2390may

2391define
	
2392a

2393readResolve

2394method

2395which

2396returns


2397an

2398object

2399visible


2400to

2401other

2402parties,


2403or

2404readUnshared

2405may

2406return
	
2407a

2408Class

2409object


2410or

2411enum

2412constant

2413
obtainable

2414	elsewhere


2415in

2416the

2417stream


2418or

2419through

2420external

2421means.


2422If

2423the

2424deserialized

2425object

2426defines
	
2427a

2428readResolve

2429method

2430and

2431the

2432
invocation


2433of

2434that

2435method

2436returns


2437an

2438array,

2439then

2440readUnshared

2441returns
	
2442a

2443shallow

2444clone


2445of

2446that

2447array;

2448this

2449
guarantees

2450that

2451the

2452returned

2453array

2454object


2455is

2456unique

2457and

2458cannot


2459be

2460obtained
	
2461a

2462second

2463time

2464from


2465an

2466
invocation


2467of

2468
readObject


2469or

2470readUnshared


2471on

2472the

2473ObjectInputStream,

2474even


2475if

2476the

2477
underlying

2478data

2479stream

2480has

2481been

2482manipulated.

2483ObjectInputStream

2484
subclasses

2485which

2486override

2487this

2488method

2489can

2490only


2491be

2492constructed


2493in

2494security

2495contexts

2496
possessing

2497the
&
2498"enableSubclassImplementation"

2499SerializablePermission;

2500any

2501attempt


2502to

2503instantiate

2504such
	
2505a

2506subclass

2507without

2508this

2509
permission

2510will

2511cause
	
2512a

2513SecurityException


2514to


2515be

2516thrown.

2517Returns:

2518	reference


2519to

2520deserialized

2521object

2522Throws:

2523ClassNotFoundException
	
2524-


2525if

2526class


2527of


2528an

2529object


2530to

2531deserialize

2532cannot


2533be

2534found
 
2535StreamCorruptedException
	
2536-


2537if

2538control

2539information


2540in

2541the

2542stream


2543is

2544inconsistent

2545ObjectStreamException
	
2546-


2547if

2548object


2549to

2550deserialize

2551has

2552already

2553appeared


2554in

2555stream

2556OptionalDataException
	
2557-


2558if

2559	primitive

2560data


2561is

2562next


2563in

2564stream

2565IOException
	
2566-


2567if


2568an

2569I/O

2570error

2571occurs

2572during

2573deserialization

2574Since:

25751.4

2576defaultReadObject

2577public

2578void

2579defaultReadObject()

2580throws

2581IOException,

2582ClassNotFoundException

2583Read

2584the

2585
non-static

2586and

2587non-transient

2588fields


2589of

2590the

2591current

2592class

2593from

2594this

2595stream.

2596This

2597may

2598only


2599be

2600called

2601from

2602the

2603
readObject

2604method


2605of

2606the

2607class

2608being

2609deserialized.


2610It

2611will

2612throw

2613the

2614NotActiveException


2615if


2616it


2617is

2618called

2619
otherwise.

2620Throws:

2621ClassNotFoundException
	
2622-


2623if

2624the

2625class


2626of
	
2627a

2628
serialized

2629object

2630could

2631not


2632be

2633found.

2634IOException
	
2635-


2636if


2637an

2638I/O

2639error

2640occurs.

2641NotActiveException
	
2642-


2643if

2644the

2645stream


2646is

2647not

2648	currently

2649reading

2650objects.

2651
readFields

2652public
"
2653ObjectInputStream.GetField

2654readFields()

2655throws

2656IOException,

2657ClassNotFoundException

2658Reads

2659the

2660
persistent

2661fields

2662from

2663the

2664stream

2665and

2666makes

2667them

2668	available


2669by

2670name.

2671Returns:

2672the

2673GetField

2674object

2675representing

2676the

2677
persistent

2678fields


2679of

2680the

2681object

2682being

2683deserialized

2684Throws:

2685ClassNotFoundException
	
2686-


2687if

2688the

2689class


2690of
	
2691a

2692
serialized

2693object

2694could

2695not


2696be

2697found.

2698IOException
	
2699-


2700if


2701an

2702I/O

2703error

2704occurs.

2705NotActiveException
	
2706-


2707if

2708the

2709stream


2710is

2711not

2712	currently

2713reading

2714objects.

2715Since:

27161.2

2717registerValidation

2718public

2719void
0
2720(registerValidation(ObjectInputValidation

2721obj,

2722int

2723prio)

2724throws

2725NotActiveException,

2726InvalidObjectException

2727Register


2728an

2729object


2730to


2731be

2732	validated

2733before

2734the

2735graph


2736is

2737	returned.

2738While

2739similar


2740to

2741resolveObject

2742these

2743validations

2744are

2745called

2746after

2747the

2748entire

2749graph

2750has

2751been

2752reconstituted.

2753
Typically,
	
2754a

2755
readObject

2756method

2757will

2758register

2759the

2760object

2761with

2762the

2763stream


2764so

2765that

2766when

2767all


2768of

2769the

2770objects

2771are

2772restored
	
2773a

2774final

2775set


2776of

2777validations

2778can


2779be

2780
performed.

2781Parameters:

2782obj
	
2783-

2784the

2785object


2786to

2787receive

2788the

2789
validation

2790	callback.

2791prio
	
2792-

2793controls

2794the

2795order


2796of

2797callbacks;zero


2798is
	
2799a

2800good

2801default.

2802Use

2803higher

2804numbers


2805to


2806be

2807called

2808back

2809earlier,

2810lower

2811numbers

2812for

2813later

2814
callbacks.

2815Within
	
2816a

2817	priority,

2818	callbacks

2819are

2820	processed


2821in


2822no

2823
particular

2824order.

2825Throws:

2826NotActiveException
	
2827-

2828The

2829stream


2830is

2831not

2832	currently

2833reading

2834objects


2835so


2836it


2837is

2838invalid


2839to

2840register
	
2841a

2842	callback.

2843InvalidObjectException
	
2844-

2845The

2846
validation

2847object


2848is

2849null.

2850resolveClass

2851	protected

2852Class<?>
&
2853resolveClass(ObjectStreamClass

2854desc)

2855throws

2856IOException,

2857ClassNotFoundException

2858Load

2859the

2860local

2861class

2862
equivalent


2863of

2864the

2865	specified

2866stream

2867class

2868description.

2869
Subclasses

2870may

2871	implement

2872this

2873method


2874to

2875allow

2876classes


2877to


2878be

2879fetched

2880from


2881an

2882	alternate

2883source.

2884The

2885corresponding

2886method


2887in

2888ObjectOutputStream


2889is

2890annotateClass.

2891This

2892method

2893will


2894be

2895invoked

2896only

2897once

2898for

2899each

2900unique

2901class


2902in

2903the

2904stream.

2905This

2906method

2907can


2908be

2909implemented


2910by

2911
subclasses


2912to

2913use


2914an

2915	alternate

2916loading

2917	mechanism

2918but

2919must

2920return
	
2921a

2922Class

2923object.

2924Once

2925	returned,


2926if

2927the

2928class


2929is

2930not


2931an

2932array

2933class,

2934its

2935serialVersionUID


2936is

2937compared


2938to

2939the

2940serialVersionUID


2941of

2942the

2943
serialized

2944class,

2945and


2946if

2947there


2948is
	
2949a

2950	mismatch,

2951the

2952deserialization

2953fails

2954and


2955an

2956InvalidClassException


2957is

2958thrown.

2959The

2960default

2961implementation


2962of

2963this

2964method


2965in

2966ObjectInputStream

2967returns

2968the

2969result


2970of

2971calling
%
2972Class.forName(desc.getName(),

2973false,

2974loader)

2975where

2976loader


2977is

2978
determined


2979as

2980follows:


2981if

2982there


2983is
	
2984a

2985method


2986on

2987the

2988current

2989thread's

2990stack

2991whose

2992	declaring

2993class

2994was

2995defined


2996by
	
2997a

2998user-defined

2999class

3000loader

3001(and

3002was

3003not
	
3004a

3005	generated


3006to

3007	implement

3008
reflective

3009invocations),

3010then

3011loader


3012is

3013class

3014loader

3015corresponding


3016to

3017the

3018closest

3019such

3020method


3021to

3022the

3023	currently

3024	executing

3025frame;

3026
otherwise,

3027loader


3028is

3029null.


3030If

3031this

3032call

3033results


3034in
	
3035a

3036ClassNotFoundException

3037and

3038the

3039name


3040of

3041the

3042passed

3043ObjectStreamClass

3044instance


3045is

3046the

3047Java

3048language

3049keyword

3050for
	
3051a

3052	primitive

3053type


3054or

3055void,

3056then

3057the

3058Class

3059object

3060representing

3061that

3062	primitive

3063type


3064or

3065void

3066will


3067be

3068returned

3069(e.g.,


3070an

3071ObjectStreamClass

3072with

3073the

3074name

3075"int"

3076will


3077be

3078resolved


3079to

3080Integer.TYPE).

3081
Otherwise,

3082the

3083ClassNotFoundException

3084will


3085be

3086thrown


3087to

3088the

3089caller


3090of

3091this

3092method.

3093Parameters:

3094desc
	
3095-


3096an

3097instance


3098of

3099class

3100ObjectStreamClass

3101Returns:
	
3102a

3103Class

3104object

3105corresponding


3106to

3107desc

3108Throws:

3109IOException
	
3110-

3111any


3112of

3113the

3114usual

3115Input/Output

3116exceptions.

3117ClassNotFoundException
	
3118-


3119if

3120class


3121of
	
3122a

3123
serialized

3124object

3125cannot


3126be

3127found.

3128resolveProxyClass

3129	protected

3130Class<?>
"
3131resolveProxyClass(String[]

3132interfaces)

3133throws

3134IOException,

3135ClassNotFoundException

3136Returns
	
3137a

3138proxy

3139class

3140that

3141
implements

3142the

3143
interfaces

3144named


3145in
	
3146a

3147proxy

3148class

3149descriptor;

3150
subclasses

3151may

3152	implement

3153this

3154method


3155to

3156read

3157custom

3158data

3159from

3160the

3161stream

3162along

3163with

3164the

3165descriptors

3166for

3167dynamic

3168proxy

3169classes,

3170allowing

3171them


3172to

3173use


3174an

3175	alternate

3176loading

3177	mechanism

3178for

3179the

3180
interfaces

3181and

3182the

3183proxy

3184class.

3185This

3186method


3187is

3188called

3189exactly

3190once

3191for

3192each

3193unique

3194proxy

3195class

3196
descriptor


3197in

3198the

3199stream.

3200The

3201corresponding

3202method


3203in

3204ObjectOutputStream


3205is

3206annotateProxyClass.

3207For
	
3208a

3209given

3210subclass


3211of

3212ObjectInputStream

3213that

3214	overrides

3215this

3216method,

3217the

3218annotateProxyClass

3219method


3220in

3221the

3222corresponding

3223subclass


3224of

3225ObjectOutputStream

3226must

3227write

3228any

3229data


3230or

3231objects

3232read


3233by

3234this

3235method.

3236The

3237default

3238implementation


3239of

3240this

3241method


3242in

3243ObjectInputStream

3244returns

3245the

3246result


3247of

3248calling

3249Proxy.getProxyClass

3250with

3251the

3252list


3253of

3254Class

3255objects

3256for

3257the

3258
interfaces

3259that

3260are

3261named


3262in

3263the

3264
interfaces

3265
parameter.

3266The

3267Class

3268object

3269for

3270each

3271	interface

3272name
	
3273i


3274is

3275the

3276value

3277returned


3278by

3279calling

3280Class.forName(i,

3281false,

3282loader)

3283where

3284loader


3285is

3286that


3287of

3288the

3289first

3290non-null

3291class

3292loader


3293up

3294the

3295	execution

3296stack,


3297or

3298null


3299if


3300no

3301non-null

3302class

3303loaders

3304are


3305on

3306the

3307stack

3308(the

3309same

3310class

3311loader

3312choice

3313used


3314by

3315the

3316resolveClass

3317method).

3318Unless

3319any


3320of

3321the

3322resolved

3323
interfaces

3324are

3325non-public,

3326this

3327same

3328value


3329of

3330loader


3331is

3332also

3333the

3334class

3335loader

3336passed


3337to

3338Proxy.getProxyClass;


3339if

3340
non-public

3341
interfaces

3342are

3343present,

3344their

3345class

3346loader


3347is

3348passed

3349instead

3350(if

3351more

3352than

3353one

3354
non-public

3355	interface

3356class

3357loader


3358is

3359encountered,


3360an

3361IllegalAccessError


3362is

3363thrown).


3364If

3365Proxy.getProxyClass

3366throws


3367an
!
3368IllegalArgumentException,

3369resolveProxyClass

3370will

3371throw
	
3372a

3373ClassNotFoundException

3374
containing

3375the
!
3376IllegalArgumentException.

3377Parameters:

3378
interfaces
	
3379-

3380the

3381list


3382of

3383	interface

3384names

3385that

3386were

3387deserialized


3388in

3389the

3390proxy

3391class

3392
descriptor

3393Returns:
	
3394a

3395proxy

3396class

3397for

3398the

3399	specified

3400
interfaces

3401Throws:

3402IOException
	
3403-

3404any

3405	exception

3406thrown


3407by

3408the

3409
underlying

3410InputStream

3411ClassNotFoundException
	
3412-


3413if

3414the

3415proxy

3416class


3417or

3418any


3419of

3420the

3421named

3422
interfaces

3423could

3424not


3425be

3426found

3427Since:

34281.3

3429See

3430Also:
4
3431,ObjectOutputStream.annotateProxyClass(Class)

3432resolveObject

3433	protected

3434Object

3435resolveObject(Object

3436obj)

3437throws

3438IOException

3439This

3440method

3441will

3442allow

3443trusted

3444
subclasses


3445of

3446ObjectInputStream


3447to

3448
substitute

3449one

3450object

3451for

3452another

3453during

3454deserialization.

3455	Replacing

3456objects


3457is

3458disabled

3459until

3460enableResolveObject


3461is

3462called.

3463The

3464enableResolveObject

3465method

3466checks

3467that

3468the

3469stream

3470
requesting


3471to

3472resolve

3473object

3474can


3475be

3476trusted.

3477Every

3478	reference


3479to

3480serializable

3481objects


3482is

3483passed


3484to

3485resolveObject.


3486To

3487insure

3488that

3489the

3490private

3491state


3492of

3493objects


3494is

3495not

3496unintentionally

3497exposed

3498only

3499trusted

3500streams

3501may

3502use

3503resolveObject.

3504This

3505method


3506is

3507called

3508after


3509an

3510object

3511has

3512been

3513read

3514but

3515before


3516it


3517is

3518returned

3519from

3520readObject.

3521The

3522default

3523resolveObject

3524method

3525just

3526returns

3527the

3528same

3529object.

3530When
	
3531a

3532subclass


3533is

3534	replacing

3535objects


3536it

3537must

3538insure

3539that

3540the

3541substituted

3542object


3543is

3544
compatible

3545with

3546every

3547field

3548where

3549the

3550	reference

3551will


3552be

3553stored.

3554Objects

3555whose

3556type


3557is

3558not
	
3559a

3560subclass


3561of

3562the

3563type


3564of

3565the

3566field


3567or

3568array

3569element

3570abort

3571the

3572serialization


3573by

3574raising


3575an

3576	exception

3577and

3578the

3579object


3580is

3581not


3582be

3583stored.

3584This

3585method


3586is

3587called

3588only

3589once

3590when

3591each

3592object


3593is

3594first

3595encountered.

3596All

3597
subsequent

3598
references


3599to

3600the

3601object

3602will


3603be

3604
redirected


3605to

3606the

3607new

3608object.

3609Parameters:

3610obj
	
3611-

3612object


3613to


3614be

3615substituted

3616Returns:

3617the

3618substituted

3619object

3620Throws:

3621IOException
	
3622-

3623Any


3624of

3625the

3626usual

3627Input/Output

3628exceptions.

3629enableResolveObject

3630	protected

3631boolean
#
3632enableResolveObject(boolean

3633enable)

3634throws

3635SecurityException

3636Enable

3637the

3638stream


3639to

3640allow

3641objects

3642read

3643from

3644the

3645stream


3646to


3647be

3648	replaced.

3649When

3650enabled,

3651the

3652resolveObject

3653method


3654is

3655called

3656for

3657every

3658object

3659being

3660deserialized.


3661If

3662enable


3663is

3664true,

3665and

3666there


3667is
	
3668a

3669security

3670manager

3671
installed,

3672this

3673method

3674first

3675calls

3676the

3677security

3678	manager's

3679checkPermission

3680method

3681with

3682the
4
3683,SerializablePermission("enableSubstitution")

3684
permission


3685to

3686ensure

3687it's


3688ok


3689to

3690enable

3691the

3692stream


3693to

3694allow

3695objects

3696read

3697from

3698the

3699stream


3700to


3701be

3702	replaced.

3703Parameters:

3704enable
	
3705-

3706true

3707for

3708enabling

3709use


3710of

3711resolveObject

3712for

3713every

3714object

3715being

3716deserialized

3717Returns:

3718the

3719previous

3720setting

3721before

3722this

3723method

3724was

3725invoked

3726Throws:

3727SecurityException
	
3728-


3729if
	
3730a

3731security

3732manager

3733exists

3734and

3735its

3736checkPermission

3737method

3738denies

3739enabling

3740the

3741stream


3742to

3743allow

3744objects

3745read

3746from

3747the

3748stream


3749to


3750be

3751	replaced.

3752See

3753Also:
B
3754:SecurityManager.checkPermission(java.security.Permission),

3755SerializablePermission

3756readStreamHeader

3757	protected

3758void

3759readStreamHeader()

3760throws

3761IOException,
 
3762StreamCorruptedException

3763The

3764readStreamHeader

3765method


3766is

3767provided


3768to

3769allow

3770
subclasses


3771to

3772read

3773and

3774verify

3775their

3776own

3777stream

3778headers.


3779It

3780reads

3781and

3782verifies

3783the

3784magic

3785number

3786and

3787version

3788number.

3789Throws:

3790IOException
	
3791-


3792if

3793there

3794are

3795I/O

3796errors

3797while

3798reading

3799from

3800the

3801
underlying

3802InputStream
 
3803StreamCorruptedException
	
3804-


3805if

3806control

3807information


3808in

3809the

3810stream


3811is

3812inconsistent

3813readClassDescriptor

3814	protected

3815ObjectStreamClass

3816readClassDescriptor()

3817throws

3818IOException,

3819ClassNotFoundException

3820Read
	
3821a

3822class

3823
descriptor

3824from

3825the

3826serialization

3827stream.

3828This

3829method


3830is

3831called

3832when

3833the

3834ObjectInputStream

3835expects
	
3836a

3837class

3838
descriptor


3839as

3840the

3841next

3842item


3843in

3844the

3845serialization

3846stream.

3847
Subclasses


3848of

3849ObjectInputStream

3850may

3851override

3852this

3853method


3854to

3855read


3856in

3857class

3858descriptors

3859that

3860have

3861been

3862written


3863in

3864non-standard

3865formats

3866(by

3867
subclasses


3868of

3869ObjectOutputStream

3870which

3871have

3872
overridden

3873the

3874writeClassDescriptor

3875method).


3876By

3877default,

3878this

3879method

3880reads

3881class

3882descriptors

3883	according


3884to

3885the

3886format

3887defined


3888in

3889the

3890Object

3891Serialization

3892specification.

3893Returns:

3894the

3895class

3896
descriptor

3897read

3898Throws:

3899IOException
	
3900-


3901If


3902an

3903I/O

3904error

3905has

3906	occurred.

3907ClassNotFoundException
	
3908-


3909If

3910the

3911Class


3912of
	
3913a

3914
serialized

3915object

3916used


3917in

3918the

3919class

3920
descriptor

3921representation

3922cannot


3923be

3924found

3925Since:

39261.3

3927See

3928Also:
J
3929BObjectOutputStream.writeClassDescriptor(java.io.ObjectStreamClass)

3930read

3931public

3932int

3933read()

3934throws

3935IOException

3936Reads
	
3937a

3938byte


3939of

3940data.

3941This

3942method

3943will

3944block


3945if


3946no

3947input


3948is

3949
available.

3950	Specified

3951by:

3952read


3953in

3954	interface

3955ObjectInput

3956	Specified

3957by:

3958read


3959in

3960class

3961InputStream

3962Returns:

3963the

3964byte

3965read,


3966or


3967-1


3968if

3969the

3970end


3971of

3972the

3973stream


3974is

3975reached.

3976Throws:

3977IOException
	
3978-


3979If


3980an

3981I/O

3982error

3983has

3984	occurred.

3985read

3986public

3987int

3988read(byte[]

3989buf,

3990int

3991off,

3992int

3993len)

3994throws

3995IOException

3996Reads

3997into


3998an

3999array


4000of

4001bytes.

4002This

4003method

4004will

4005block

4006until

4007some

4008input


4009is

4010
available.

4011Consider

4012using
)
4013!java.io.DataInputStream.readFully


4014to

4015read

4016exactly

4017'length'

4018bytes.

4019	Specified

4020by:

4021read


4022in

4023	interface

4024ObjectInput

4025
Overrides:

4026read


4027in

4028class

4029InputStream

4030Parameters:

4031buf
	
4032-

4033the

4034buffer

4035into

4036which

4037the

4038data


4039is

4040read

4041off
	
4042-

4043the

4044start

4045offset


4046of

4047the

4048data

4049len
	
4050-

4051the

4052maximum

4053number


4054of

4055bytes

4056read

4057Returns:

4058the

4059actual

4060number


4061of

4062bytes

4063read,


4064-1


4065is

4066returned

4067when

4068the

4069end


4070of

4071the

4072stream


4073is

4074reached.

4075Throws:

4076IOException
	
4077-


4078If


4079an

4080I/O

4081error

4082has

4083	occurred.

4084See

4085Also:
1
4086)DataInputStream.readFully(byte[],int,int)

4087	available

4088public

4089int

4090available()

4091throws

4092IOException

4093Returns

4094the

4095number


4096of

4097bytes

4098that

4099can


4100be

4101read

4102without

4103	blocking.

4104	Specified

4105by:

4106	available


4107in

4108	interface

4109ObjectInput

4110
Overrides:

4111	available


4112in

4113class

4114InputStream

4115Returns:

4116the

4117number


4118of

4119	available

4120bytes.

4121Throws:

4122IOException
	
4123-


4124if

4125there

4126are

4127I/O

4128errors

4129while

4130reading

4131from

4132the

4133
underlying

4134InputStream

4135close

4136public

4137void

4138close()

4139throws

4140IOException

4141Closes

4142the

4143input

4144stream.

4145Must


4146be

4147called


4148to

4149release

4150any

4151	resources

4152
associated

4153with

4154the

4155stream.

4156	Specified

4157by:

4158close


4159in

4160	interface

4161	Closeable

4162	Specified

4163by:

4164close


4165in

4166	interface

4167ObjectInput

4168	Specified

4169by:

4170close


4171in

4172	interface

4173AutoCloseable

4174
Overrides:

4175close


4176in

4177class

4178InputStream

4179Throws:

4180IOException
	
4181-


4182If


4183an

4184I/O

4185error

4186has

4187	occurred.

4188readBoolean

4189public

4190boolean

4191readBoolean()

4192throws

4193IOException

4194Reads


4195in
	
4196a

4197boolean.

4198	Specified

4199by:

4200readBoolean


4201in

4202	interface

4203	DataInput

4204Returns:

4205the

4206boolean

4207read.

4208Throws:

4209EOFException
	
4210-


4211If

4212end


4213of

4214file


4215is

4216reached.

4217IOException
	
4218-


4219If

4220other

4221I/O

4222error

4223has

4224	occurred.

4225readByte

4226public

4227byte

4228
readByte()

4229throws

4230IOException

4231Reads


4232an
	
42338

4234bit

4235byte.

4236	Specified

4237by:

4238readByte


4239in

4240	interface

4241	DataInput

4242Returns:

4243the
	
42448

4245bit

4246byte

4247read.

4248Throws:

4249EOFException
	
4250-


4251If

4252end


4253of

4254file


4255is

4256reached.

4257IOException
	
4258-


4259If

4260other

4261I/O

4262error

4263has

4264	occurred.

4265readUnsignedByte

4266public

4267int

4268readUnsignedByte()

4269throws

4270IOException

4271Reads


4272an

4273unsigned
	
42748

4275bit

4276byte.

4277	Specified

4278by:

4279readUnsignedByte


4280in

4281	interface

4282	DataInput

4283Returns:

4284the
	
42858

4286bit

4287byte

4288read.

4289Throws:

4290EOFException
	
4291-


4292If

4293end


4294of

4295file


4296is

4297reached.

4298IOException
	
4299-


4300If

4301other

4302I/O

4303error

4304has

4305	occurred.

4306readChar

4307public

4308char

4309
readChar()

4310throws

4311IOException

4312Reads
	
4313a


431416

4315bit

4316char.

4317	Specified

4318by:

4319readChar


4320in

4321	interface

4322	DataInput

4323Returns:

4324the


432516

4326bit

4327char

4328read.

4329Throws:

4330EOFException
	
4331-


4332If

4333end


4334of

4335file


4336is

4337reached.

4338IOException
	
4339-


4340If

4341other

4342I/O

4343error

4344has

4345	occurred.

4346	readShort

4347public

4348short

4349readShort()

4350throws

4351IOException

4352Reads
	
4353a


435416

4355bit

4356short.

4357	Specified

4358by:

4359	readShort


4360in

4361	interface

4362	DataInput

4363Returns:

4364the


436516

4366bit

4367short

4368read.

4369Throws:

4370EOFException
	
4371-


4372If

4373end


4374of

4375file


4376is

4377reached.

4378IOException
	
4379-


4380If

4381other

4382I/O

4383error

4384has

4385	occurred.

4386readUnsignedShort

4387public

4388int

4389readUnsignedShort()

4390throws

4391IOException

4392Reads


4393an

4394unsigned


439516

4396bit

4397short.

4398	Specified

4399by:

4400readUnsignedShort


4401in

4402	interface

4403	DataInput

4404Returns:

4405the


440616

4407bit

4408short

4409read.

4410Throws:

4411EOFException
	
4412-


4413If

4414end


4415of

4416file


4417is

4418reached.

4419IOException
	
4420-


4421If

4422other

4423I/O

4424error

4425has

4426	occurred.

4427readInt

4428public

4429int

4430	readInt()

4431throws

4432IOException

4433Reads
	
4434a


443532

4436bit

4437int.

4438	Specified

4439by:

4440readInt


4441in

4442	interface

4443	DataInput

4444Returns:

4445the


444632

4447bit

4448integer

4449read.

4450Throws:

4451EOFException
	
4452-


4453If

4454end


4455of

4456file


4457is

4458reached.

4459IOException
	
4460-


4461If

4462other

4463I/O

4464error

4465has

4466	occurred.

4467readLong

4468public

4469long

4470
readLong()

4471throws

4472IOException

4473Reads
	
4474a


447564

4476bit

4477long.

4478	Specified

4479by:

4480readLong


4481in

4482	interface

4483	DataInput

4484Returns:

4485the

4486read


448764

4488bit

4489long.

4490Throws:

4491EOFException
	
4492-


4493If

4494end


4495of

4496file


4497is

4498reached.

4499IOException
	
4500-


4501If

4502other

4503I/O

4504error

4505has

4506	occurred.

4507	readFloat

4508public

4509float

4510readFloat()

4511throws

4512IOException

4513Reads
	
4514a


451532

4516bit

4517float.

4518	Specified

4519by:

4520	readFloat


4521in

4522	interface

4523	DataInput

4524Returns:

4525the


452632

4527bit

4528float

4529read.

4530Throws:

4531EOFException
	
4532-


4533If

4534end


4535of

4536file


4537is

4538reached.

4539IOException
	
4540-


4541If

4542other

4543I/O

4544error

4545has

4546	occurred.

4547
readDouble

4548public

4549double

4550readDouble()

4551throws

4552IOException

4553Reads
	
4554a


455564

4556bit

4557double.

4558	Specified

4559by:

4560
readDouble


4561in

4562	interface

4563	DataInput

4564Returns:

4565the


456664

4567bit

4568double

4569read.

4570Throws:

4571EOFException
	
4572-


4573If

4574end


4575of

4576file


4577is

4578reached.

4579IOException
	
4580-


4581If

4582other

4583I/O

4584error

4585has

4586	occurred.

4587	readFully

4588public

4589void

4590readFully(byte[]

4591buf)

4592throws

4593IOException

4594Reads

4595bytes,

4596blocking

4597until

4598all

4599bytes

4600are

4601read.

4602	Specified

4603by:

4604	readFully


4605in

4606	interface

4607	DataInput

4608Parameters:

4609buf
	
4610-

4611the

4612buffer

4613into

4614which

4615the

4616data


4617is

4618read

4619Throws:

4620EOFException
	
4621-


4622If

4623end


4624of

4625file


4626is

4627reached.

4628IOException
	
4629-


4630If

4631other

4632I/O

4633error

4634has

4635	occurred.

4636	readFully

4637public

4638void

4639readFully(byte[]

4640buf,

4641int

4642off,

4643int

4644len)

4645throws

4646IOException

4647Reads

4648bytes,

4649blocking

4650until

4651all

4652bytes

4653are

4654read.

4655	Specified

4656by:

4657	readFully


4658in

4659	interface

4660	DataInput

4661Parameters:

4662buf
	
4663-

4664the

4665buffer

4666into

4667which

4668the

4669data


4670is

4671read

4672off
	
4673-

4674the

4675start

4676offset


4677of

4678the

4679data

4680len
	
4681-

4682the

4683maximum

4684number


4685of

4686bytes


4687to

4688read

4689Throws:

4690EOFException
	
4691-


4692If

4693end


4694of

4695file


4696is

4697reached.

4698IOException
	
4699-


4700If

4701other

4702I/O

4703error

4704has

4705	occurred.

4706	skipBytes

4707public

4708int

4709skipBytes(int

4710len)

4711throws

4712IOException

4713Skips

4714bytes.

4715	Specified

4716by:

4717	skipBytes


4718in

4719	interface

4720	DataInput

4721Parameters:

4722len
	
4723-

4724the

4725number


4726of

4727bytes


4728to


4729be

4730skipped

4731Returns:

4732the

4733actual

4734number


4735of

4736bytes

4737skipped.

4738Throws:

4739IOException
	
4740-


4741If


4742an

4743I/O

4744error

4745has

4746	occurred.

4747readLine

4748@Deprecated

4749public

4750String

4751
readLine()

4752throws

4753IOException

4754Deprecated.

4755This

4756method

4757does

4758not

4759properly

4760convert

4761bytes


4762to

4763characters.

4764see

4765DataInputStream

4766for

4767the

4768details

4769and

4770alternatives.

4771Reads


4772in
	
4773a

4774line

4775that

4776has

4777been

4778
terminated


4779by
	
4780a

4781\n,

4782\r,

4783\r\n


4784or

4785EOF.

4786	Specified

4787by:

4788readLine


4789in

4790	interface

4791	DataInput

4792Returns:
	
4793a

4794String

4795copy


4796of

4797the

4798line.

4799Throws:

4800IOException
	
4801-


4802if

4803there

4804are

4805I/O

4806errors

4807while

4808reading

4809from

4810the

4811
underlying

4812InputStream

4813readUTF

4814public

4815String

4816	readUTF()

4817throws

4818IOException

4819Reads
	
4820a

4821String


4822in

4823modified

4824UTF-8

4825format.

4826	Specified

4827by:

4828readUTF


4829in

4830	interface

4831	DataInput

4832Returns:

4833the

4834String.

4835Throws:

4836IOException
	
4837-


4838if

4839there

4840are

4841I/O

4842errors

4843while

4844reading

4845from

4846the

4847
underlying

4848InputStream

4849UTFDataFormatException
	
4850-


4851if

4852read

4853bytes


4854do

4855not

4856	represent
	
4857a

4858valid

4859modified

4860UTF-8

4861encoding


4862of
	
4863a

4864string
6
4865.OverviewPackageClassUseTreeDeprecatedIndexHelp

4866Java™

4867Platform

4868Standard

4869Ed.
	
48707

4871Prev

4872	ClassNext

4873ClassFramesNo

4874FramesSummary:

4875Nested
	
4876|

4877Field
	
4878|

4879Constr
	
4880|

4881MethodDetail:

4882Field
	
4883|

4884Constr
	
4885|

4886Method

4887Submit
	
4888a

4889bug


4890or

4891feature

4892For

4893further

4894API

4895	reference

4896and

4897	developer

4898documentation,

4899see

4900Java


4901SE

4902Documentation.

4903That

4904documentation

4905contains

4906more

4907	detailed,

4908developer-targeted

4909descriptions,

4910with

4911
conceptual

4912
overviews,

4913definitions


4914of

4915terms,

4916workarounds,

4917and

4918working

4919code

4920	examples.

4921	Copyright


4922©

49231993,

49242013,

4925Oracle

4926and/or

4927its

4928affiliates.

4929All

4930rights

4931	reserved.

4932	Hypertext

4933Transfer

4934Protocol

4935From

4936
Wikipedia,

4937the

4938free

4939encyclopedia

4940(Redirected

4941from

4942Http)

4943Changes

4944must


4945be

4946reviewed

4947before

4948being

4949	displayed


4950on

4951this

4952page.show/hide

4953details

4954Page

4955	protected

4956with

4957pending

4958changes

4959level
	
49601

4961Internet

4962protocol

4963suite

4964Application

4965layer

4966DHCP

4967DHCPv6

4968DNS

4969FTP

4970HTTP

4971IMAP

4972IRC

4973LDAP

4974MGCP

4975NNTP

4976BGP

4977NTP

4978POP

4979RPC

4980RTP

4981RTSP

4982RIP

4983SIP

4984SMTP

4985SNMP

4986SOCKS

4987SSH

4988Telnet

4989TLS/SSL

4990XMPP

4991more...

4992	Transport

4993layer

4994TCP

4995UDP

4996DCCP

4997SCTP

4998RSVP

4999more...

5000Internet

5001layer


5002IP

5003IPv4

5004IPv6

5005OSPF

5006ICMP

5007ICMPv6

5008ECN

5009IGMP

5010IPsec

5011more...

5012Link

5013layer

5014	ARP/InARP

5015NDP

5016Tunnels

5017L2TP

5018PPP

5019Media

5020access

5021control

5022Ethernet

5023DSL

5024ISDN

5025FDDI

5026DOCSIS

5027more...
	
5028v
	
5029t
	
5030e

5031The

5032	Hypertext

5033Transfer

5034Protocol

5035(HTTP)


5036is


5037an

5038application

5039protocol

5040for

5041distributed,

5042collaborative,

5043
hypermedia

5044information

5045systems.[1]

5046HTTP


5047is

5048the

5049
foundation


5050of

5051data

5052communication

5053for

5054the

5055World

5056Wide

5057Web.

5058	Hypertext


5059is

5060
structured

5061text

5062that

5063uses

5064logical

5065links

5066(hyperlinks)

5067between

5068nodes

5069
containing

5070text.

5071HTTP


5072is

5073the

5074protocol


5075to

5076exchange


5077or

5078transfer

5079
hypertext.

5080The

5081	standards

5082development


5083of

5084HTTP

5085was

5086coordinated


5087by

5088the

5089Internet

5090Engineering

5091Task

5092Force

5093(IETF)

5094and

5095the

5096World

5097Wide

5098Web

5099
Consortium

5100(W3C),

5101culminating


5102in

5103the

5104publication


5105of
	
5106a

5107series


5108of

5109Requests

5110for

5111Comments

5112(RFCs),

5113most

5114notably

5115RFC

51162616

5117(June

51181999),

5119which

5120defines

5121	HTTP/1.1,

5122the

5123version


5124of

5125HTTP


5126in

5127common

5128use.

5129Contents

5130[hide]
	
51311

5132	Technical

5133overview
	
51342

5135History
	
51363

5137HTTP

5138session
	
51394

5140Request

5141methods

51424.1

5143Safe

5144methods

51454.2

5146
Idempotent

5147methods

5148and

5149web

5150applications

51514.3

5152Security
	
51535

5154Status

5155codes
	
51566

5157
Persistent

5158connections
	
51597

5160HTTP

5161session

5162state
	
51638

5164	Encrypted

5165connections
	
51669

5167Request

5168message


516910

5170Response

5171message


517211

5173Example

5174session

517511.1

5176Client

5177request

517811.2

5179Server

5180response


518112

5182Alternatives


5183to

5184HTTP


518513

5186See

5187also


518814

5189Notes


519015

5191
References


519216

5193External

5194links

5195	Technical

5196overview[edit]

5197URL

5198	beginning

5199with

5200the

5201HTTP

5202scheme

5203and

5204the

5205WWW

5206domain

5207name

5208label.

5209HTTP

5210	functions


5211as
	
5212a

5213request-response

5214protocol


5215in

5216the

5217client-server

5218	computing

5219model.
	
5220A

5221web

5222browser,

5223for

5224example,

5225may


5226be

5227the

5228client

5229and


5230an

5231application

5232running


5233on
	
5234a

5235computer

5236hosting
	
5237a

5238web

5239site

5240may


5241be

5242the

5243server.

5244The

5245client

5246submits


5247an

5248HTTP

5249request

5250message


5251to

5252the

5253server.

5254The

5255server,

5256which

5257provides

5258	resources

5259such


5260as

5261HTML

5262files

5263and

5264other

5265content,


5266or

5267performs

5268other

5269	functions


5270on

5271behalf


5272of

5273the

5274client,

5275returns
	
5276a

5277response

5278message


5279to

5280the

5281client.

5282The

5283response

5284contains

5285
completion

5286status

5287information

5288about

5289the

5290request

5291and

5292may

5293also

5294contain

5295	requested

5296content


5297in

5298its

5299message

5300body.
	
5301A

5302web

5303browser


5304is


5305an

5306example


5307of
	
5308a

5309user

5310agent

5311(UA).

5312Other

5313types


5314of

5315user

5316agent

5317include

5318the

5319indexing

5320software

5321used


5322by

5323search

5324	providers

5325(web

5326
crawlers),

5327voice

5328	browsers,

5329mobile

5330apps

5331and

5332other

5333software

5334that

5335	accesses,

5336consumes


5337or

5338displays

5339web

5340content.

5341HTTP


5342is

5343designed


5344to

5345permit

5346intermediate

5347network

5348elements


5349to

5350improve


5351or

5352enable

5353communications

5354between

5355clients

5356and

5357servers.

5358High-traffic

5359websites

5360often

5361benefit

5362from

5363web

5364cache

5365servers

5366that

5367deliver

5368content


5369on

5370behalf


5371of

5372upstream

5373servers


5374to

5375improve

5376response

5377time.

5378Web

5379browsers

5380cache

5381
previously

5382accessed

5383web

5384	resources

5385and

5386reuse

5387them

5388when

5389possible


5390to

5391reduce

5392network

5393traffic.

5394HTTP

5395proxy

5396servers


5397at

5398private

5399network

5400
boundaries

5401can

5402
facilitate

5403communication

5404for

5405clients

5406without
	
5407a

5408globally

5409routable

5410address,


5411by

5412relaying

5413messages

5414with

5415external

5416servers.

5417HTTP


5418is


5419an

5420application

5421layer

5422protocol

5423designed

5424within

5425the

5426	framework


5427of

5428the

5429Internet

5430Protocol

5431Suite.

5432Its

5433
definition

5434presumes


5435an

5436
underlying

5437and

5438reliable

5439	transport

5440layer

5441protocol,[2]

5442and

5443Transmission

5444Control

5445Protocol

5446(TCP)


5447is

5448commonly

5449used.

5450However

5451HTTP

5452can

5453use

5454
unreliable

5455	protocols

5456such


5457as

5458the

5459User

5460Datagram

5461Protocol

5462(UDP),

5463for

5464example


5465in

5466Simple

5467Service

5468	Discovery

5469Protocol

5470(SSDP).

5471HTTP

5472	resources

5473are

5474
identified

5475and

5476located


5477on

5478the

5479network


5480by

5481Uniform

5482Resource

5483Identifiers

5484(URIs)—or,

5485more

5486specifically,

5487Uniform

5488Resource

5489Locators

5490(URLs)—using

5491the

5492http


5493or

5494https

5495URI

5496schemes.

5497URIs

5498and

5499
hyperlinks


5500in

5501	Hypertext

5502Markup

5503Language

5504(HTML)

5505	documents

5506form

5507webs


5508of

5509inter-linked

5510	hypertext

5511
documents.

5512HTTP/1.1


5513is
	
5514a

5515revision


5516of

5517the

5518original

5519HTTP

5520(HTTP/1.0).


5521In

5522HTTP/1.0
	
5523a

5524separate

5525
connection


5526to

5527the

5528same

5529server


5530is

5531made

5532for

5533every

5534resource

5535request.

5536HTTP/1.1

5537can

5538reuse
	
5539a

5540
connection

5541multiple

5542times


5543to

5544download

5545images,

5546scripts,

5547stylesheets


5548et

5549cetera

5550after

5551the

5552page

5553has

5554been

5555
delivered.

5556HTTP/1.1

5557communications

5558	therefore

5559
experience

5560less

5561latency


5562as

5563the

5564establishment


5565of

5566TCP

5567connections

5568presents

5569considerable

5570	overhead.

5571History[edit]

5572Tim

5573Berners-Lee

5574The

5575term

5576	HyperText

5577was

5578coined


5579by

5580Ted

5581Nelson

5582who


5583in

5584turn

5585was

5586inspired


5587by

5588Vannevar

5589Bush's

5590microfilm-based

5591"memex".

5592Tim

5593Berners-Lee

5594first

5595proposed

5596the

5597"WorldWideWeb"

5598project

5599—

5600now

5601known


5602as

5603the

5604World

5605Wide

5606Web.

5607Berners-Lee

5608and

5609his

5610team

5611are

5612credited

5613with

5614	inventing

5615the

5616original

5617HTTP

5618along

5619with

5620HTML

5621and

5622the

5623
associated

5624
technology

5625for
	
5626a

5627web

5628server

5629and
	
5630a

5631
text-based

5632web

5633browser.

5634The

5635first

5636version


5637of

5638the

5639protocol

5640had

5641only

5642one

5643method,

5644namely

5645GET,

5646which

5647would

5648request
	
5649a

5650page

5651from
	
5652a

5653
server.[3]

5654The

5655response

5656from

5657the

5658server

5659was

5660always


5661an

5662HTML

5663page.[4]

5664The

5665first

5666
documented

5667version


5668of

5669HTTP

5670was

5671HTTP

5672V0.9

5673(1991).

5674Dave

5675Raggett

5676led

5677the

5678HTTP

5679Working

5680Group

5681(HTTP

5682WG)


5683in

56841995

5685and

5686wanted


5687to

5688expand

5689the

5690protocol

5691with

5692extended

5693operations,

5694extended

5695negotiation,

5696richer

5697meta-information,

5698tied

5699with
	
5700a

5701security

5702protocol

5703which

5704became

5705more

5706	efficient


5707by

5708adding

5709
additional

5710methods

5711and

5712header

5713fields.[5][6]

5714RFC

57151945

5716
officially

5717
introduced

5718and

5719
recognized

5720HTTP

5721V1.0


5722in

57231996.

5724The

5725HTTP


5726WG

5727planned


5728to

5729publish

5730new

5731	standards


5732in

5733December

57341995[7]

5735and

5736the

5737support

5738for

5739pre-standard

5740HTTP/1.1

5741based


5742on

5743the

5744then

5745
developing

5746RFC

57472068

5748(called

5749HTTP-NG)

5750was

5751rapidly

5752adopted


5753by

5754the

5755major

5756browser

5757
developers


5758in

5759early

57601996.


5761By

5762March

57631996,

5764pre-standard

5765HTTP/1.1

5766was

5767	supported


5768in

5769	Arena,[8]

5770Netscape

57712.0,[8]

5772Netscape

5773	Navigator

5774Gold

57752.01,[8]

5776Mosaic

57772.7,[citation

5778needed]

5779Lynx

57802.5[citation

5781needed],

5782and


5783in

5784Internet

5785Explorer

57862.0[citation

5787needed].

5788End-user

5789adoption


5790of

5791the

5792new

5793browsers

5794was

5795rapid.


5796In

5797March

57981996,

5799one

5800web

5801hosting

5802company

5803reported

5804that

5805over

580640%


5807of

5808browsers


5809in

5810use


5811on

5812the

5813Internet

5814were

5815HTTP

58161.1

5817compliant.[citation

5818needed]

5819That

5820same

5821web

5822hosting

5823company

5824reported

5825that


5826by

5827June

58281996,

582965%


5830of

5831all

5832browsers

5833	accessing

5834their

5835servers

5836were

5837HTTP/1.1

5838compliant.[9]

5839The

5840HTTP/1.1

5841standard


5842as

5843defined


5844in

5845RFC

58462068

5847was

5848
officially

5849released


5850in

5851January

58521997.

5853Improvements

5854and

5855updates


5856to

5857the

5858HTTP/1.1

5859standard

5860were

5861released

5862under

5863RFC

58642616


5865in

5866June

58671999.

5868HTTP

5869session[edit]


5870An

5871HTTP

5872session


5873is
	
5874a

5875sequence


5876of

5877network

5878request-response

5879transactions.


5880An

5881HTTP

5882client

5883	initiates
	
5884a

5885request


5886by

5887establishing
	
5888a

5889Transmission

5890Control

5891Protocol

5892(TCP)

5893
connection


5894to
	
5895a

5896
particular

5897port


5898on
	
5899a

5900server

5901
(typically

5902port

590380;

5904see

5905List


5906of

5907TCP

5908and

5909UDP

5910port

5911	numbers).


5912An

5913HTTP

5914server

5915	listening


5916on

5917that

5918port

5919waits

5920for
	
5921a

5922client's

5923request

5924message.

5925Upon

5926	receiving

5927the

5928request,

5929the

5930server

5931sends

5932back
	
5933a

5934status

5935line,

5936such


5937as

5938	"HTTP/1.1

5939200

5940OK",

5941and
	
5942a

5943message


5944of

5945its

5946own.

5947The

5948body


5949of

5950this

5951message


5952is

5953	typically

5954the

5955	requested

5956	resource,

5957although


5958an

5959error

5960message


5961or

5962other

5963information

5964may

5965also


5966be

5967returned.[1]

5968Request

5969methods[edit]


5970An

5971HTTP

59721.1

5973request

5974made

5975using

5976telnet.

5977The

5978request,

5979response

5980headers

5981and

5982response

5983body

5984are

5985highlighted.

5986HTTP

5987defines

5988methods

5989
(sometimes

5990referred


5991to


5992as

5993verbs)


5994to

5995indicate

5996the

5997desired

5998action


5999to


6000be

6001	performed


6002on

6003the

6004
identified

6005	resource.

6006What

6007this

6008resource

6009represents,

6010whether

6011pre-existing

6012data


6013or

6014data

6015that


6016is

6017	generated

6018dynamically,

6019depends


6020on

6021the

6022implementation


6023of

6024the

6025server.

6026Often,

6027the

6028resource

6029corresponds


6030to
	
6031a

6032file


6033or

6034the

6035output


6036of


6037an

6038
executable

6039residing


6040on

6041the

6042server.

6043The

6044HTTP/1.0
!
6045specification[10]:section
	
60468

6047defined

6048the

6049GET,

6050POST

6051and

6052HEAD

6053methods

6054and

6055the

6056HTTP/1.1
 
6057specification[1]:section
	
60589

6059added
	
60605

6061new

6062methods:

6063OPTIONS,

6064PUT,

6065DELETE,

6066TRACE

6067and

6068CONNECT.


6069By

6070being

6071	specified


6072in

6073these

6074	documents

6075their

6076	semantics

6077are

6078well

6079known

6080and

6081can


6082be

6083depended

6084upon.

6085Any

6086client

6087can

6088use

6089any

6090method

6091and

6092the

6093server

6094can


6095be

6096
configured


6097to

6098support

6099any

6100combination


6101of

6102methods.


6103If
	
6104a

6105method


6106is

6107unknown


6108to


6109an

6110intermediate


6111it

6112will


6113be

6114treated


6115as


6116an

6117unsafe

6118and

6119non-idempotent

6120method.

6121There


6122is


6123no

6124limit


6125to

6126the

6127number


6128of

6129methods

6130that

6131can


6132be

6133defined

6134and

6135this

6136allows

6137for

6138future

6139methods


6140to


6141be

6142	specified

6143without

6144breaking

6145existing

6146infrastructure.

6147For

6148example

6149WebDAV

6150defined
	
61517

6152new

6153methods

6154and

6155RFC5789

6156	specified

6157the

6158PATCH

6159method.

6160GET

6161Requests
	
6162a

6163representation


6164of

6165the

6166	specified

6167	resource.

6168Requests

6169using

6170GET

6171should

6172only

6173retrieve

6174data

6175and

6176should

6177have


6178no

6179other

6180effect.

6181(This


6182is

6183also

6184true


6185of

6186some

6187other

6188HTTP

6189methods.)[1]

6190The

6191W3C

6192has

6193	published

6194guidance

6195
principles


6196on

6197this

6198distinction,

6199saying,

6200"Web

6201application

6202design

6203should


6204be

6205informed


6206by

6207the

6208above

6209principles,

6210but

6211also


6212by

6213the

6214relevant

6215limitations."[11]

6216See

6217safe

6218methods

6219below.

6220HEAD

6221Asks

6222for

6223the

6224response

6225	identical


6226to

6227the

6228one

6229that

6230would

6231
correspond


6232to
	
6233a

6234GET

6235request,

6236but

6237without

6238the

6239response

6240body.

6241This


6242is

6243useful

6244for

6245
retrieving

6246meta-information

6247written


6248in

6249response

6250headers,

6251without

6252having


6253to

6254	transport

6255the

6256entire

6257content.

6258POST

6259Requests

6260that

6261the

6262server

6263accept

6264the

6265entity

6266enclosed


6267in

6268the

6269request


6270as
	
6271a

6272new

6273subordinate


6274of

6275the

6276web

6277resource

6278
identified


6279by

6280the

6281URI.

6282The

6283data

6284POSTed

6285might

6286be,


6287as

6288	examples,


6289an

6290
annotation

6291for

6292existing

6293
resources;
	
6294a

6295message

6296for
	
6297a

6298bulletin

6299board,

6300
newsgroup,

6301mailing

6302list,


6303or

6304comment

6305thread;
	
6306a

6307block


6308of

6309data

6310that


6311is

6312the

6313result


6314of

6315
submitting
	
6316a

6317web

6318form


6319to
	
6320a

6321data-handling

6322process;


6323or


6324an

6325item


6326to

6327add


6328to
	
6329a

6330database.[12]

6331PUT

6332Requests

6333that

6334the

6335enclosed

6336entity


6337be

6338stored

6339under

6340the

6341supplied

6342URI.


6343If

6344the

6345URI

6346refers


6347to


6348an

6349already

6350existing

6351	resource,


6352it


6353is

6354	modified;


6355if

6356the

6357URI

6358does

6359not

6360point


6361to


6362an

6363existing

6364	resource,

6365then

6366the

6367server

6368can

6369create

6370the

6371resource

6372with

6373that

6374URI.[13]

6375DELETE

6376Deletes

6377the

6378	specified

6379	resource.

6380TRACE

6381Echoes

6382back

6383the

6384received

6385request


6386so

6387that
	
6388a

6389client

6390can

6391see

6392what

6393(if

6394any)

6395changes


6396or

6397	additions

6398have

6399been

6400made


6401by

6402intermediate

6403servers.

6404OPTIONS

6405Returns

6406the

6407HTTP

6408methods

6409that

6410the

6411server

6412supports

6413for

6414the

6415	specified

6416URL.

6417This

6418can


6419be

6420used


6421to

6422check

6423the

6424functionality


6425of
	
6426a

6427web

6428server


6429by

6430
requesting

6431'*'

6432instead


6433of
	
6434a

6435specific

6436	resource.

6437CONNECT

6438Converts

6439the

6440request

6441
connection


6442to
	
6443a

6444transparent

6445TCP/IP

6446tunnel,

6447usually


6448to

6449
facilitate

6450SSL-encrypted

6451communication

6452(HTTPS)

6453through


6454an

6455unencrypted

6456HTTP

6457proxy.[14][15]

6458PATCH


6459Is

6460used


6461to

6462apply

6463partial

6464modifications


6465to
	
6466a

6467resource.[16]

6468HTTP

6469servers

6470are

6471required


6472to

6473	implement


6474at

6475least

6476the

6477GET

6478and

6479HEAD

6480methods[17]

6481and,

6482whenever

6483	possible,

6484also

6485the

6486OPTIONS

6487method.[citation

6488needed]

6489Safe

6490methods[edit]

6491Some

6492methods

6493(for

6494example,

6495HEAD,

6496GET,

6497OPTIONS

6498and

6499TRACE)

6500are

6501defined


6502as

6503safe,

6504which

6505means

6506they

6507are

6508intended

6509only

6510for

6511information

6512	retrieval

6513and

6514should

6515not

6516change

6517the

6518state


6519of

6520the

6521server.


6522In

6523other

6524words,

6525they

6526should

6527not

6528have

6529side

6530effects,

6531beyond

6532
relatively

6533harmless

6534effects

6535such


6536as

6537logging,

6538caching,

6539the

6540serving


6541of

6542banner

6543advertisements


6544or

6545incrementing
	
6546a

6547web

6548counter.

6549Making

6550	arbitrary

6551GET

6552requests

6553without

6554regard


6555to

6556the

6557context


6558of

6559the

6560application's

6561state

6562should

6563	therefore


6564be

6565
considered

6566safe.


6567By

6568	contrast,

6569methods

6570such


6571as

6572POST,

6573PUT

6574and

6575DELETE

6576are

6577intended

6578for

6579actions

6580that

6581may

6582cause

6583side

6584effects

6585either


6586on

6587the

6588server,


6589or

6590external

6591side

6592effects

6593such


6594as

6595	financial

6596transactions


6597or

6598transmission


6599of

6600email.

6601Such

6602methods

6603are

6604	therefore

6605not

6606usually

6607used


6608by

6609
conforming

6610web

6611robots


6612or

6613web

6614	crawlers;

6615some

6616that


6617do

6618not

6619conform

6620tend


6621to

6622make

6623requests

6624without

6625regard


6626to

6627context


6628or

6629consequences.

6630Despite

6631the

6632
prescribed

6633safety


6634of

6635GET

6636	requests,


6637in

6638practice

6639their

6640handling


6641by

6642the

6643server


6644is

6645not

6646technically

6647limited


6648in

6649any

6650way.

6651
Therefore,

6652careless


6653or

6654
deliberate

6655programming

6656can

6657cause

6658non-trivial

6659changes


6660on

6661the

6662server.

6663This


6664is

6665discouraged,

6666because


6667it

6668can

6669cause

6670problems

6671for

6672Web

6673caching,

6674search

6675engines

6676and

6677other

6678	automated

6679agents,

6680which

6681can

6682make

6683
unintended

6684changes


6685on

6686the

6687server.

6688
Idempotent

6689methods

6690and

6691web

6692applications[edit]

6693Methods

6694PUT

6695and

6696DELETE

6697are

6698defined


6699to


6700be

6701idempotent,

6702meaning

6703that

6704multiple

6705	identical

6706requests

6707should

6708have

6709the

6710same

6711effect


6712as
	
6713a

6714single

6715request

6716(Note

6717that

6718idempotence

6719refers


6720to

6721the

6722state


6723of

6724the

6725system

6726after

6727the

6728request

6729has

6730
completed,


6731so

6732while

6733the

6734action

6735the

6736server

6737takes

6738(e.g.

6739deleting
	
6740a

6741record)


6742or

6743the

6744response

6745code


6746it

6747returns

6748may


6749be

6750	different


6751on

6752
subsequent

6753	requests,

6754the

6755system

6756state

6757will


6758be

6759the

6760same

6761every

6762time).

6763Methods

6764GET,

6765HEAD,

6766OPTIONS

6767and

6768TRACE,

6769being

6770
prescribed


6771as

6772safe,

6773should

6774also


6775be

6776idempotent,


6777as

6778HTTP


6779is
	
6780a

6781	stateless

6782protocol.[1]


6783In

6784	contrast,

6785the

6786POST

6787method


6788is

6789not

6790necessarily

6791idempotent,

6792and

6793	therefore

6794sending


6795an

6796	identical

6797POST

6798request

6799multiple

6800times

6801may

6802further

6803affect

6804state


6805or

6806cause

6807further

6808side

6809effects

6810(such


6811as

6812	financial

6813transactions).


6814In

6815some

6816cases

6817this

6818may


6819be

6820
desirable,

6821but


6822in

6823other

6824cases

6825this

6826could


6827be

6828due


6829to


6830an

6831	accident,

6832such


6833as

6834when
	
6835a

6836user

6837does

6838not

6839realize

6840that

6841their

6842action

6843will

6844result


6845in

6846sending

6847another

6848request,


6849or

6850they

6851did

6852not

6853receive

6854adequate

6855feedback

6856that

6857their

6858first

6859request

6860was

6861successful.

6862While

6863web

6864browsers

6865may

6866show

6867alert

6868dialog

6869boxes


6870to

6871warn

6872users


6873in

6874some

6875cases

6876where

6877	reloading
	
6878a

6879page

6880may

6881	re-submit
	
6882a

6883POST

6884request,


6885it


6886is

6887	generally


6888up


6889to

6890the

6891web

6892application


6893to

6894handle

6895cases

6896where
	
6897a

6898POST

6899request

6900should

6901not


6902be

6903	submitted

6904more

6905than

6906once.

6907Note

6908that

6909whether
	
6910a

6911method


6912is

6913
idempotent


6914is

6915not

6916enforced


6917by

6918the

6919protocol


6920or

6921web

6922server.


6923It


6924is

6925	perfectly

6926possible


6927to

6928write
	
6929a

6930web

6931application


6932in

6933which

6934(for

6935example)
	
6936a

6937database

6938insert


6939or

6940other

6941non-idempotent

6942action


6943is

6944	triggered


6945by
	
6946a

6947GET


6948or

6949other

6950request.

6951Ignoring

6952this

6953recommendation,

6954however,

6955may

6956result


6957in

6958undesirable

6959consequences,


6960if
	
6961a

6962user

6963agent

6964assumes

6965that

6966	repeating

6967the

6968same

6969request


6970is

6971safe

6972when


6973it

6974isn't.

6975Security[edit]

6976Implementing

6977methods

6978such


6979as

6980TRACE,

6981TRACK

6982and

6983DEBUG

6984are

6985
considered

6986potentially

6987insecure


6988by

6989some

6990security

6991professionals

6992because

6993	attackers

6994can

6995use

6996them


6997to

6998gather

6999information


7000or

7001bypass

7002security

7003controls

7004during

7005attacks.

7006Security

7007software

7008tools

7009such


7010as

7011Tenable

7012Nessus

7013and

7014	Microsoft

7015UrlScan

7016Security

7017Tool

7018report


7019on

7020the

7021presence


7022of

7023these

7024methods


7025as

7026being

7027security

7028issues.[18]

7029TRACK

7030and

7031DEBUG

7032are

7033not

7034valid

7035HTTP

70361.1

7037
verbs.[19]

7038Status

7039codes[edit]

7040See

7041also:

7042List


7043of

7044HTTP

7045status

7046codes


7047In

7048HTTP/1.0

7049and

7050since,

7051the

7052first

7053line


7054of

7055the

7056HTTP

7057response


7058is

7059called

7060the

7061status

7062line

7063and

7064includes
	
7065a

7066numeric

7067status

7068code

7069(such


7070as

7071"404")

7072and
	
7073a

7074textual

7075reason

7076phrase

7077(such


7078as

7079"Not

7080Found").

7081The

7082way

7083the

7084user

7085agent

7086handles

7087the

7088response

7089	primarily

7090depends


7091on

7092the

7093code

7094and

7095secondarily


7096on

7097the

7098response

7099headers.

7100Custom

7101status

7102codes

7103can


7104be

7105used

7106since,


7107if

7108the

7109user

7110agent

7111
encounters
	
7112a

7113code


7114it

7115does

7116not

7117
recognize,


7118it

7119can

7120use

7121the

7122first

7123digit


7124of

7125the

7126code


7127to

7128	determine

7129the

7130general

7131class


7132of

7133the

7134response.[20]

7135Also,

7136the

7137standard

7138reason

7139phrases

7140are

7141only

7142recommendations

7143and

7144can


7145be

7146replaced

7147with

7148"local

7149equivalents"


7150at

7151the

7152web

7153developer's

7154discretion.


7155If

7156the

7157status

7158code

7159	indicated
	
7160a

7161problem,

7162the

7163user

7164agent

7165might

7166display

7167the

7168reason

7169phrase


7170to

7171the

7172user


7173to

7174provide

7175further

7176information

7177about

7178the

7179nature


7180of

7181the

7182problem.

7183The

7184standard

7185also

7186allows

7187the

7188user

7189agent


7190to

7191attempt


7192to

7193	interpret

7194the

7195reason

7196phrase,

7197though

7198this

7199might


7200be

7201unwise

7202since

7203the

7204standard

7205
explicitly

7206	specifies

7207that

7208status

7209codes

7210are

7211machine-readable

7212and

7213reason

7214phrases

7215are

7216human-readable.

7217HTTP

7218status

7219code


7220is

7221	primarily

7222divided

7223into

7224five

7225groups

7226for

7227better

7228explanation


7229of

7230request

7231and

7232	responses

7233between

7234client

7235and

7236server


7237as

7238named:

7239Informational

72401XX,

7241
Successful

72422XX,

7243Redirection

72443XX,

7245Client

7246Error

72474XX

7248and

7249Server

7250Error

72515XX.

7252
Persistent

7253connections[edit]

7254Main

7255article:

7256HTTP

7257
persistent

7258
connection


7259In

7260HTTP/0.9

7261and

72621.0,

7263the

7264
connection


7265is

7266closed

7267after
	
7268a

7269single

7270request/response

7271pair.


7272In

7273HTTP/1.1
	
7274a

7275keep-alive-mechanism

7276was

7277introduced,

7278where
	
7279a

7280
connection

7281could


7282be

7283reused

7284for

7285more

7286than

7287one

7288request.

7289Such

7290
persistent

7291connections

7292reduce

7293request

7294latency

7295perceptibly,

7296because

7297the

7298client

7299does

7300not

7301need


7302to

7303re-negotiate

7304the

7305TCP

73063-Way-Handshake

7307
connection

7308after

7309the

7310first

7311request

7312has

7313been

7314sent.

7315Another

7316positive

7317side

7318effect


7319is

7320that


7321in

7322general

7323the

7324
connection

7325becomes

7326faster

7327with

7328time

7329due


7330to

7331TCP's

7332slow-start-mechanism.

7333Version

73341.1


7335of

7336the

7337protocol

7338also

7339made

7340	bandwidth

7341optimization

7342improvements


7343to

7344	HTTP/1.0.

7345For

7346example,

7347HTTP/1.1

7348
introduced

7349chunked

7350transfer

7351encoding


7352to

7353allow

7354content


7355on

7356
persistent

7357connections


7358to


7359be

7360streamed

7361rather

7362than

7363	buffered.

7364HTTP

7365
pipelining

7366further

7367reduces

7368lag

7369time,

7370allowing

7371clients


7372to

7373send

7374multiple

7375requests

7376before

7377waiting

7378for

7379each

7380	response.

7381Another

7382improvement


7383to

7384the

7385protocol

7386was

7387byte

7388serving,

7389where
	
7390a

7391server

7392	transmits

7393just

7394the

7395portion


7396of
	
7397a

7398resource

7399
explicitly

7400	requested


7401by
	
7402a

7403client.

7404HTTP

7405session

7406state[edit]

7407HTTP


7408is
	
7409a

7410	stateless

7411	protocol.
	
7412A

7413	stateless

7414protocol

7415does

7416not

7417require

7418the

7419HTTP

7420server


7421to

7422retain

7423information


7424or

7425status

7426about

7427each

7428user

7429for

7430the

7431duration


7432of

7433multiple

7434	requests.

7435However,

7436some

7437web

7438applications

7439	implement

7440states


7441or

7442server

7443side

7444sessions

7445using

7446one


7447or

7448more


7449of

7450the

7451	following

7452methods:

7453Hidden

7454	variables

7455within

7456web

7457forms.

7458HTTP

7459cookies.

7460Query

7461string

7462parameters,

7463for

7464example,
7
7465//index.php?session_id=some_unique_session_code.

7466	Encrypted

7467connections[edit]

7468The

7469most

7470popular

7471way


7472of

7473establishing


7474an

7475	encrypted

7476HTTP

7477
connection


7478is

7479HTTP

7480Secure.

7481Two

7482other

7483methods

7484for

7485establishing


7486an

7487	encrypted

7488HTTP

7489
connection

7490also

7491exist,

7492called

7493Secure

7494	Hypertext

7495Transfer

7496Protocol

7497and

7498the

7499HTTP/1.1

7500Upgrade

7501header.

7502Browser

7503support,

7504for

7505these

7506latter

7507two,

7508is,

7509however,

7510nearly

7511non-existent,[citation

7512needed]


7513so

7514HTTP

7515Secure


7516is

7517the

7518dominant

7519method


7520of

7521establishing


7522an

7523	encrypted

7524HTTP

7525connection.

7526Request

7527message[edit]

7528The

7529request

7530message

7531consists


7532of

7533the

7534
following:
	
7535A

7536request

7537line,

7538for

7539example

7540GET

7541/images/logo.png

7542	HTTP/1.1,

7543which

7544requests
	
7545a

7546resource

7547called

7548/images/logo.png

7549from

7550the

7551server.

7552Request

7553Headers,

7554such


7555as

7556Accept-Language:


7557en


7558An

7559empty

7560line.


7561An

7562optional

7563message

7564body.

7565The

7566request

7567line

7568and

7569headers

7570must

7571all

7572end

7573with

7574<CR><LF>

7575(that

7576is,
	
7577a

7578carriage

7579return

7580	character

7581followed


7582by
	
7583a

7584line

7585feed

7586character).

7587The

7588empty

7589line

7590must

7591consist


7592of

7593only

7594<CR><LF>

7595and


7596no

7597other

7598whitespace.[21]


7599In

7600the

7601HTTP/1.1

7602	protocol,

7603all

7604headers

7605except

7606Host

7607are

7608	optional.
	
7609A

7610request

7611line

7612
containing

7613only

7614the

7615path

7616name


7617is

7618accepted


7619by

7620servers


7621to

7622maintain

7623compatibility

7624with

7625HTTP

7626clients

7627before

7628the

7629HTTP/1.0

7630specification


7631in

7632RFC

7633	1945.[22]

7634Response

7635message[edit]

7636The

7637response

7638message

7639consists


7640of

7641the

7642
following:
	
7643A

7644Status-Line

7645(for

7646example

7647HTTP/1.1

7648200

7649OK,

7650which

7651	indicates

7652that

7653the

7654client's

7655request

7656
succeeded)

7657Response

7658Headers,

7659such


7660as

7661Content-Type:

7662	text/html


7663An

7664empty

7665line


7666An

7667optional

7668message

7669body

7670The

7671Status-Line

7672and

7673headers

7674must

7675all

7676end

7677with

7678<CR><LF>


7679(a

7680carriage

7681return

7682followed


7683by
	
7684a

7685line

7686feed).

7687The

7688empty

7689line

7690must

7691consist


7692of

7693only

7694<CR><LF>

7695and


7696no

7697other

7698whitespace.[21]

7699Example

7700session[edit]

7701Below


7702is
	
7703a

7704sample

7705conversation

7706between


7707an

7708HTTP

7709client

7710and


7711an

7712HTTP

7713server

7714running


7715on

7716www.example.com,

7717port

771880.

7719Client

7720request[edit]

7721GET

7722/index.html

7723HTTP/1.1

7724Host:

7725www.example.com
	
7726A

7727client

7728request

7729(consisting


7730in

7731this

7732case


7733of

7734the

7735request

7736line

7737and

7738only

7739one

7740header)


7741is

7742followed


7743by
	
7744a

7745blank

7746line,


7747so

7748that

7749the

7750request

7751ends

7752with
	
7753a

7754double

7755newline,

7756each


7757in

7758the

7759form


7760of
	
7761a

7762carriage

7763return

7764followed


7765by
	
7766a

7767line

7768feed.

7769The

7770"Host"

7771header

7772distinguishes

7773between

7774various

7775DNS

7776names

7777sharing
	
7778a

7779single


7780IP

7781address,

7782allowing

7783
name-based

7784virtual

7785hosting.

7786While

7787optional


7788in

7789	HTTP/1.0,


7790it


7791is

7792	mandatory


7793in

7794	HTTP/1.1.

7795Server

7796response[edit]

7797HTTP/1.1

7798200


7799OK

7800Date:

7801Mon,


780223

7803May

78042005

780522:38:34

7806GMT

7807Server:

7808Apache/1.3.3.7

7809(Unix)

7810(Red-Hat/Linux)

7811Last-Modified:

7812Wed,


781308

7814Jan

78152003

781623:11:55

7817GMT

7818ETag:

7819"3f80f-1b6-3e1cb03b"

7820Content-Type:

7821
text/html;

7822charset=UTF-8

7823Content-Length:

7824131

7825Connection:

7826close

7827<html>

7828<head>

7829	<title>An

7830Example

7831Page</title>

7832</head>

7833<body>

7834Hello

7835World,

7836this


7837is
	
7838a

7839very

7840simple

7841HTML

7842	document.

7843</body>

7844</html>

7845The

7846ETag

7847(entity

7848tag)

7849header


7850is

7851used


7852to

7853	determine


7854if
	
7855a

7856cached

7857version


7858of

7859the

7860	requested

7861resource


7862is

7863	identical


7864to

7865the

7866current

7867version


7868of

7869the

7870resource


7871on

7872the

7873server.

7874Content-Type

7875	specifies

7876the

7877Internet

7878media

7879type


7880of

7881the

7882data

7883conveyed


7884by

7885the

7886HTTP

7887message,

7888while

7889Content-Length

7890	indicates

7891its

7892length


7893in

7894bytes.

7895The

7896HTTP/1.1

7897	webserver

7898	publishes

7899its

7900ability


7901to

7902respond


7903to

7904requests

7905for

7906certain

7907byte

7908ranges


7909of

7910the

7911document


7912by

7913setting

7914the

7915header

7916Accept-Ranges:

7917bytes.

7918This


7919is

7920useful,


7921if

7922the

7923client

7924needs


7925to

7926have

7927only

7928certain

7929portions[23]


7930of
	
7931a

7932resource

7933sent


7934by

7935the

7936server,

7937which


7938is

7939called

7940byte

7941serving.

7942When

7943Connection:

7944close


7945is

7946sent


7947in
	
7948a

7949header,


7950it

7951means

7952that

7953the

7954web

7955server

7956will

7957close

7958the

7959TCP

7960
connection

7961immediately

7962after

7963the

7964transfer


7965of

7966this

7967	response.

7968Most


7969of

7970the

7971header

7972lines

7973are

7974	optional.

7975When

7976Content-Length


7977is

7978missing

7979the

7980length


7981is

7982
determined


7983in

7984other

7985ways.

7986Chunked

7987transfer

7988encoding

7989uses
	
7990a

7991chunk

7992size


7993of
	
79940


7995to

7996mark

7997the

7998end


7999of

8000the

8001content.

8002Identity

8003encoding

8004without

8005Content-Length

8006reads

8007content

8008until

8009the

8010socket


8011is

8012closed.
	
8013A

8014Content-Encoding

8015like

8016gzip

8017can


8018be

8019used


8020to

8021compress

8022the

8023transmitted

8024data.

8025Alternatives


8026to

8027
HTTP[edit]

8028Historically,

8029Gopher

8030existed


8031as
	
8032a

8033
competitor


8034to

8035HTTP.

8036See

8037
also[edit]

8038HTTP

8039Persistence

8040Compression

8041HTTPS

8042Request

8043methods

8044OPTIONS

8045GET

8046HEAD

8047POST

8048PUT

8049DELETE

8050TRACE

8051CONNECT

8052PATCH

8053Header

8054fields

8055Cookie

8056ETag

8057Location

8058HTTP

8059referer

8060DNT

8061X-Forwarded-For

8062Status

8063codes

8064301

8065Moved

8066Permanently

8067302

8068Found

8069303

8070See

8071Other

8072403

8073	Forbidden

8074404

8075Not

8076Found
	
8077v
	
8078t
	
8079e

8080Basic

8081access

8082authentication

8083Constrained

8084Application

8085Protocol

8086–
	
8087A

8088semantically

8089similar

8090protocol


8091to

8092HTTP

8093but

8094used

8095UDP


8096or

8097UDP-like

8098messages

8099targeted

8100for

8101devices

8102with

8103limited

8104
processing

8105capability.

8106Re-uses

8107HTTP

8108and

8109other

8110internet

8111concepts

8112like

8113Internet

8114media

8115type

8116and

8117web

8118linking

8119(RFC

8120	5988)[24]

8121Content

8122negotiation

8123Curl-loader

8124–

8125HTTP/S

8126loading

8127and

8128testing

8129open-source

8130software

8131Digest

8132access

8133authentication

8134HTTP

81352.0

8136–

8137	currently

8138being

8139worked


8140on


8141by

8142the

8143IETF's

8144	Hypertext

8145Transfer

8146Protocol

8147Bis

8148	(httpbis)

8149working

8150
group.[25]

8151HTTP

8152compression

8153
HTTP-MPLEX

8154–
	
8155A

8156	backwards

8157
compatible

8158enhancement


8159to

8160HTTP


8161to

8162improve

8163page

8164and

8165web

8166object

8167	retrieval

8168time


8169in

8170	congested

8171networks

8172proposed


8173by

8174Robert

8175Mattson

8176Hxxp

8177List


8178of

8179file

8180transfer

8181	protocols

8182List


8183of

8184HTTP

8185header

8186fields

8187Representational

8188State

8189Transfer

8190(REST)

8191SPDY

8192–


8193An

8194HTTP

8195enhancement

8196proposed


8197by

8198Google

8199Variant

8200object

8201Waka

8202
(protocol)

8203–


8204An

8205HTTP

8206replacement

8207proposed


8208by

8209Roy

8210Fielding

8211Web

8212cache

8213	WebSocket

8214Notes[edit]
	
8215^

8216Jump


8217up

8218to:
	
8219a
	
8220b
	
8221c
	
8222d
	
8223e

8224	Fielding,

8225Roy

8226T.;

8227Gettys,

8228James;

8229Mogul,

8230Jeffrey

8231C.;

8232Nielsen,

8233Henrik

8234Frystyk;

8235	Masinter,

8236Larry;

8237Leach,

8238Paul

8239J.;

8240Berners-Lee

8241(June

82421999).

8243"RFC

82442616:

8245	Hypertext

8246Transfer

8247Protocol

8248–

8249
HTTP/1.1".

8250Jump


8251up
	
8252^

8253	Fielding,


8254et

8255al.

8256Internet

8257RFC

82582616.",

8259section

82601.4.

8261	Retrieved


8262on

8263January

826421,

82652009.

8266Jump


8267up
	
8268^

8269Berners-Lee,

8270Tim.

8271
"HyperText

8272Transfer

8273
Protocol".

8274World

8275Wide

8276Web

8277Consortium.

8278	Retrieved


827931

8280August

82812010.

8282Jump


8283up
	
8284^

8285Tim

8286Berners-Lee.

8287"The

8288Original

8289HTTP


8290as

8291defined


8292in

82931991".

8294World

8295Wide

8296Web

8297Consortium.

8298	Retrieved


829924

8300July

83012010.

8302Jump


8303up
	
8304^

8305Raggett,

8306Dave.

8307"Dave

8308	Raggett's

8309Bio".

8310World

8311Wide

8312Web

8313Consortium.

8314	Retrieved


831511

8316June

83172010.

8318Jump


8319up
	
8320^

8321Raggett,

8322Dave;

8323Berners-Lee,

8324Tim.

8325
"Hypertext

8326Transfer

8327Protocol

8328Working

8329Group".

8330World

8331Wide

8332Web

8333Consortium.

8334	Retrieved


833529

8336	September

83372010.

8338Jump


8339up
	
8340^

8341Raggett,

8342Dave.

8343"HTTP


8344WG

8345Plans".

8346World

8347Wide

8348Web

8349Consortium.

8350	Retrieved


835129

8352	September

83532010.
	
8354^

8355Jump


8356up

8357to:
	
8358a
	
8359b
	
8360c

8361Simon

8362Spero.

8363	"Progress


8364on

8365	HTTP-NG".

8366World

8367Wide

8368Web

8369Consortium.

8370	Retrieved


837111

8372June

83732010.

8374Jump


8375up
	
8376^

8377"HTTP/1.1".

8378
Webcom.com

8379Glossary

8380entry.

8381	Retrieved

83822009-05-29.

8383Jump


8384up
	
8385^

8386Berners-Lee,

8387Tim;

8388	Fielding,

8389Roy

8390T.;

8391Nielsen,

8392Henrik

8393Frystyk.

8394RFC

83951945:

8396	Hypertext

8397Transfer

8398Protocol

8399–

8400	HTTP/1.0.

8401Jump


8402up
	
8403^

8404Jacobs,

8405Ian

8406(2004).

8407"URIs,

8408Addressability,

8409and

8410the

8411use


8412of

8413HTTP

8414GET

8415and

8416POST".

8417	Technical

8418Architecture

8419Group

8420finding.

8421W3C.

8422	Retrieved


842326

8424	September

84252010.

8426Jump


8427up
	
8428^

8429"RFC

84302616:

8431	Hypertext

8432Transfer

8433Protocol

8434–

8435HTTP/1.1

8436–

8437Section

84389.5

8439POST".

8440Jump


8441up
	
8442^

8443"RFC

84442616:

8445	Hypertext

8446Transfer

8447Protocol

8448–

8449HTTP/1.1

8450–

8451Section

84529.6

8453PUT".

8454Jump


8455up
	
8456^

8457
"Upgrading


8458to

8459TLS

8460Within

8461
HTTP/1.1".

8462RFC

84632817.

84642000.

8465	Retrieved

8466March

846720,

84682013.

8469Jump


8470up
	
8471^

8472"Vulnerability

8473Note

8474
VU#150227:

8475HTTP

8476proxy

8477default

8478configurations

8479allow

8480	arbitrary

8481TCP

8482connections".

8483US-CERT.

84842002-05-17.

8485	Retrieved

84862007-05-10.

8487Jump


8488up
	
8489^

8490
Dusseault,

8491Lisa;

8492Snell,

8493James


8494M.

8495"RFC

84965789:

8497PATCH

8498Method

8499for

8500HTTP".

8501Jump


8502up
	
8503^

8504"HTTP

85051.1

8506Section

85075.1.1".

8508Tools.ietf.org.

8509	Retrieved

85102010-08-01.

8511Jump


8512up
	
8513^

8514"UrlScan

8515Security

8516Tool".

8517Security

8518TechCenter.

8519
Microsoft.

8520	Retrieved


852115

8522Jul

85232012.

8524Jump


8525up
	
8526^

8527
"Hypertext

8528Transfer

8529Protocol

8530–

8531HTTP/1.1

8532RFC

85332616".

8534Chapter


85359:

8536Method

8537Definitions.

8538W3C.

8539	Retrieved


854016

8541Mar

85422013.

8543Jump


8544up
	
8545^

8546"6.1

8547Status-Line".

8548W3.org.

8549	Retrieved

85502010-08-01.
	
8551^

8552Jump


8553up

8554to:
	
8555a
	
8556b

8557Fielding

8558(June

85591999).

8560"HTTP/1.1".

8561IETF.

8562	Retrieved


856319

8564January

85652012.

8566Jump


8567up
	
8568^

8569"Apache

8570Week.

8571
HTTP/1.1".

8572090502

8573apacheweek.com

8574Jump


8575up
	
8576^

8577Tools.ietf.org,

8578Byte

8579Range

8580	Retrieval

8581	Extension


8582to

8583HTTP

8584Jump


8585up
	
8586^

8587"RFC

85885988
	
8589-

8590Web

8591	Linking".

8592Tools.ietf.org.

85932008-11-10.

8594	Retrieved

85952013-06-15.

8596Jump


8597up
	
8598^

8599
"Hypertext

8600Transfer

8601Protocol

8602Bis

8603	(httpbis)

8604–

8605	Charter".

8606IETF.

86072012.

8608References[edit]

8609HTTP

86100.9

8611–


8612As

8613Implemented


8614in

86151991

8616External

8617links[edit]

8618	Wikimedia

8619Commons

8620has

8621media

8622related


8623to

8624HTTP.

8625"Change

8626History

8627for

8628HTTP".

8629W3.org.

8630	Retrieved

86312010-08-01.
	
8632A

8633detailed

8634	technical

8635history


8636of

8637HTTP.

8638"Design

8639Issues

8640for

8641HTTP".

8642W3.org.

8643	Retrieved

86442010-08-01.

8645Design

8646Issues


8647by

8648Berners-Lee

8649when


8650he

8651was

8652	designing

8653the

8654	protocol.

8655"Classic

8656HTTP

8657Documents".

8658W3.org.

86591998-05-14.

8660	Retrieved

86612010-08-01.

8662list


8663of

8664other

8665classic

8666	documents

8667
recounting

8668the

8669early

8670protocol

8671history

8672"HTTP

8673Status

8674Code

8675Definitions".

8676Times


8677of

8678HTTP

8679[show]
	
8680v
	
8681t
	
8682e

8683
Comparison


8684of

8685web

8686server

8687software

8688[show]
	
8689v
	
8690t
	
8691e

8692Semantic

8693Web

8694[show]
	
8695v
	
8696t
	
8697e

8698URI

8699scheme

8700[show]
	
8701v
	
8702t
	
8703e

8704Web

8705browsers

8706Categories:

8707	Hypertext

8708Transfer

8709ProtocolApplication

8710layer

8711protocolsOpen

8712
formatsWeb

8713browsersWorld

8714Wide

8715WebWorld

8716Wide

8717Web

8718
Consortium

8719	standards

8720
Navigation

8721menu

8722Create

8723
accountLog
!
8724inArticleTalkReadEditView

8725history

8726Search

8727Main

8728page

8729Contents

8730Featured

8731content

8732Current

8733events

8734Random

8735article

8736Donate


8737to

8738	Wikipedia

8739Interaction

8740Help

8741About

8742	Wikipedia

8743	Community

8744portal

8745Recent

8746changes

8747Contact

8748page

8749Tools

8750Print/export

8751	Languages

8752	Afrikaans

8753العربية

8754Azərbaycanca

8755বাংলা

8756Беларуская

8757Беларуская
#
8758(тарашкевіца)‎

8759Български

8760Bosanski

8761Català

8762	Čeština

8763Cymraeg

8764Dansk

8765Deutsch

8766Eesti

8767Ελληνικά

8768Español

8769	Esperanto

8770Euskara

8771
فارسی

8772	Français

8773Gaeilge

8774Galego

8775	한국어

8776Hrvatski

8777Bahasa

8778	Indonesia

8779	Íslenska

8780Italiano

8781
עברית

8782Қазақша

8783	Latviešu

8784Lëtzebuergesch

8785	Lietuvių

8786Magyar

8787Македонски

8788മലയാളം

8789Bahasa

8790Melayu

8791
Nederlands

8792नेपाल

8793भाषा

8794	日本語

8795Norsk

8796bokmål

8797Norsk

8798nynorsk

8799Occitan

8800Олык

8801
марий

8802Polski

8803
Português

8804Română

8805Русский

8806Shqip

8807Simple

8808English

8809Slovenčina

8810Slovenščina

8811Српски
	
8812/

8813srpski

8814Srpskohrvatski
	
8815/
$
8816српскохрватски

8817Suomi

8818Svenska

8819Tagalog

8820தமிழ்

8821తెలుగు

8822	ไทย

8823Тоҷикӣ

8824Türkçe

8825Українська

8826Tiếng

8827Việt

8828Võro

8829Winaray

8830Yorùbá

8831粵語

8832Zazaki

8833中文

8834Edit

8835links

8836This

8837page

8838was

8839last

8840modified


8841on


884225

8843November

88442013


8845at

884615:25.

8847Text


8848is

8849	available

8850under

8851the

8852Creative

8853Commons

8854Attribution-ShareAlike

8855License;

8856
additional

8857terms

8858may

8859apply.


8860By

8861using

8862this

8863site,

8864you

8865agree


8866to

8867the

8868Terms


8869of

8870Use

8871and

8872Privacy

8873Policy.

8874Wikipedia®


8875is
	
8876a

8877
registered

8878	trademark


8879of

8880the

8881	Wikimedia

8882Foundation,

8883Inc.,
	
8884a

8885
non-profit

8886organization.

8887Privacy

8888policyAbout
#
8889WikipediaDisclaimersContact
!
8890WikipediaDevelopersMobile

8891viewWikimedia

8892
Foundation

8893Powered


8894by

8895	MediaWiki

8896Before

8897going

8898into

8899what

8900externalization

8901is,

8902you

8903need


8904to

8905have

8906some

8907	knowledge


8908on

8909what

8910serialization


8911is

8912because

8913externalization


8914is

8915nothing

8916but

8917serialization

8918but


8919an

8920alternative

8921for


8922it

8923and

8924Externalizable

8925	interface

8926extends

8927Serializable

8928
interface.

8929Check

8930Serialization

8931article

8932for

8933information


8934on

8935serialization.

8936Just


8937as


8938an

8939	overview,

8940Serialization


8941is

8942the

8943process


8944of

8945
converting


8946an

8947object's

8948state

8949
(including

8950its

8951references)


8952to
	
8953a

8954sequence


8955of

8956bytes,


8957as

8958well


8959as

8960the

8961process


8962of

8963
rebuilding

8964those

8965bytes

8966into
	
8967a

8968live

8969object


8970at

8971some

8972future

8973time.

8974Serialization

8975can


8976be

8977achieved


8978by


8979an

8980object


8981by

8982implementing

8983Serializable

8984	interface


8985or

8986Externalizable

8987
interface.

8988Well,

8989when

8990serialization


8991by

8992implementing

8993Serializable

8994	interface


8995is

8996serving

8997your

8998purpose,

8999why

9000should

9001you


9002go

9003for

9004externalization?

9005Good

9006	question!

9007Serializing


9008by

9009implementing

9010Serializable

9011	interface

9012has

9013some

9014issues.

9015Lets

9016see

9017one


9018by

9019one

9020what

9021they

9022are.

9023Serialization


9024is
	
9025a

9026	recursive

9027
algorithm.

9028What
	
9029I

9030mean


9031to

9032say

9033here

9034is,

9035apart

9036from

9037the

9038fields

9039that

9040are

9041	required,

9042starting

9043from
	
9044a

9045single

9046object,

9047until

9048all

9049the

9050objects

9051that

9052can


9053be

9054reached

9055from

9056that

9057object


9058by

9059	following

9060instance

9061
variables,

9062are

9063also

9064serialized.

9065This

9066includes

9067the

9068super

9069class


9070of

9071the

9072object

9073until


9074it

9075reaches

9076the

9077"Object"

9078class

9079and

9080the

9081same

9082way

9083the

9084super

9085class


9086of

9087the

9088instance

9089	variables

9090until


9091it

9092reaches

9093the

9094"Object"

9095class


9096of

9097those

9098
variables.

9099	Basically

9100all

9101the

9102objects

9103that


9104it

9105can

9106read.

9107This

9108leads


9109to

9110lot


9111of

9112
overheads.

9113Say

9114for

9115example,

9116you

9117need

9118only

9119car

9120type

9121and

9122licence

9123number

9124but

9125using

9126serialization,

9127you

9128cannot

9129stop

9130there.

9131All

9132the

9133information

9134that

9135includes

9136description


9137of

9138car,

9139its

9140parts,

9141blah

9142blah

9143will


9144be

9145serialized.

9146	Obviously

9147this

9148slows

9149down

9150the

9151performance.

9152Both

9153serializing

9154and

9155deserializing

9156require

9157the

9158serialization

9159	mechanism


9160to

9161discover

9162information

9163about

9164the

9165instance


9166it


9167is

9168serializing.

9169Using

9170the

9171default

9172serialization

9173
mechanism,

9174will

9175use

9176
reflection


9177to

9178discover

9179all

9180the

9181field

9182values.

9183Also

9184the

9185information

9186about

9187class

9188description


9189is

9190added


9191to

9192the

9193stream

9194which

9195includes

9196the

9197	descption


9198of

9199all

9200the

9201serializable

9202superclasses,

9203the

9204description


9205of

9206the

9207class

9208and

9209the

9210instance

9211data

9212
associated

9213with

9214the

9215specific

9216instance


9217of

9218the

9219class.

9220Lots


9221of

9222data

9223and

9224metadata

9225and

9226again

9227performance

9228issue.

9229You

9230know

9231that

9232serialization

9233needs

9234serialVersionUID,
	
9235a

9236unique


9237Id


9238to

9239identify

9240the

9241information

9242
persisted.


9243If

9244you

9245dont

9246
explicitly

9247set
	
9248a

9249serialiVersionUID,

9250serialization

9251will

9252compute

9253the

9254serialiVersionUID


9255by

9256going

9257through

9258all

9259the

9260fields

9261and

9262methods.


9263So

9264based


9265on

9266the

9267size


9268of

9269the

9270class,

9271again

9272serialization

9273	mechanism

9274takes

9275
respective

9276amount


9277of

9278time


9279to

9280	calculate

9281the

9282value.
	
9283A

9284third

9285performance

9286issue.

9287Above

9288three

9289points

9290confirm

9291serialization

9292has

9293performance

9294issues.

9295Apart

9296from

9297performance

9298issues,

9299When


9300an

9301object

9302that

9303
implements

9304Serializable

9305
interface,


9306is

9307
serialized


9308or

9309de-serialized,


9310no

9311constructor


9312of

9313the

9314object


9315is

9316called

9317and

9318hence

9319any

9320initialization

9321which


9322is

9323done


9324in

9325the

9326constructor

9327cannot


9328be

9329done.

9330Although

9331there


9332is


9333an

9334alternative


9335of

9336writing

9337all

9338initialization

9339logic


9340in
	
9341a

9342separate

9343method

9344and

9345call


9346it


9347in

9348constructor

9349and

9350
readObject

9351methods


9352so

9353that

9354when


9355an

9356object


9357is

9358created


9359or

9360deserialized,

9361the

9362initialization

9363process

9364can

9365happen

9366but


9367it

9368
definitely


9369is
	
9370a

9371messy

9372	approach.

9373The

9374solution

9375for

9376all

9377the

9378above

9379issues


9380is

9381Externalization.

9382Cool.

9383Here

9384enters

9385the

9386actual

9387topic.


9388So

9389what


9390is

9391externalization?

9392Externalization


9393is

9394nothing

9395but

9396serialization

9397but


9398by

9399implementing

9400Externalizable

9401	interface


9402to

9403persist

9404and

9405restore

9406the

9407object.


9408To

9409externalize

9410your

9411object,

9412you

9413need


9414to

9415	implement

9416Externalizable

9417	interface

9418that

9419extends

9420Serializable

9421
interface.

9422Here

9423only

9424the

9425identity


9426of

9427the

9428class


9429is

9430written


9431in

9432the

9433serialization

9434stream

9435and


9436it


9437is

9438the

9439responsibility


9440of

9441the

9442class


9443to

9444save

9445and

9446restore

9447the

9448contents


9449of

9450its

9451	instances

9452which

9453means

9454you

9455will

9456have

9457complete

9458control


9459of

9460what


9461to

9462	serialize

9463and

9464what

9465not


9466to

9467
serialize.

9468But

9469with

9470serialization

9471the

9472identity


9473of

9474all

9475the

9476classes,

9477its

9478superclasses,

9479instance

9480	variables

9481and

9482then

9483the

9484contents

9485for

9486these

9487items


9488is

9489written


9490to

9491the

9492serialization

9493stream.

9494But


9495to

9496externalize


9497an

9498object,

9499you

9500need
	
9501a

9502default

9503public

9504constructor.

9505Unlike

9506Serializable

9507
interface,

9508Externalizable

9509	interface


9510is

9511not
	
9512a

9513marker

9514	interface

9515and


9516it

9517provides

9518two

9519methods
	
9520-

9521writeExternal

9522and

9523readExternal.

9524These

9525methods

9526are

9527implemented


9528by

9529the

9530class


9531to

9532give

9533the

9534class
	
9535a

9536complete

9537control

9538over

9539the

9540format

9541and

9542contents


9543of

9544the

9545stream

9546for


9547an

9548object

9549and

9550its

9551supertypes.

9552These

9553methods

9554must

9555
explicitly

9556
coordinate

9557with

9558the

9559	supertype


9560to

9561save

9562its

9563state.

9564These

9565methods

9566	supersede

9567
customized

9568implementations


9569of

9570writeObject

9571and

9572
readObject

9573methods.

9574How

9575serialization

9576happens?

9577JVM

9578first

9579checks

9580for

9581the

9582Externalizable

9583	interface

9584and


9585if

9586object

9587supports

9588Externalizable

9589
interface,

9590then

9591
serializes

9592the

9593object

9594using

9595writeExternal

9596method.


9597If

9598the

9599object

9600does

9601not

9602support

9603Externalizable

9604but

9605	implement

9606Serializable,

9607then

9608the

9609object


9610is

9611saved

9612using

9613ObjectOutputStream.

9614Now

9615when


9616an

9617Externalizable

9618object


9619is

9620reconstructed,


9621an

9622instance


9623is

9624created

9625first

9626using

9627the

9628public

9629no-arg

9630constructor,

9631then

9632the

9633readExternal

9634method


9635is

9636called.

9637Again


9638if

9639the

9640object

9641does

9642not

9643support

9644Externalizable,

9645then

9646Serializable

9647objects

9648are

9649restored


9650by

9651reading

9652them

9653from


9654an

9655ObjectInputStream.

9656Lets

9657see
	
9658a

9659simple

9660example.

9661NEW

9662DELHI:

9663Amid
	
9664a

9665debate

9666over

9667special

9668status


9669to

9670Jammu

9671and

9672Kashmir,

9673Union

9674minister

9675Farooq

9676Abdullah


9677on

9678Monday

9679night

9680said

9681even


9682if

9683Narendra

9684Modi

9685becomes

9686Prime

9687Minister

9688for

9689"ten

9690terms"


9691he

9692will

9693not


9694be

9695able


9696to

9697repeal

9698Article

9699370


9700of

9701the

9702cCnstitution.

9703"Even


9704if

9705Modi

9706becomes


9707PM

9708for

9709ten

9710terms,


9711he

9712will

9713not


9714be

9715able


9716to


9717do

9718away

9719with

9720Article

9721370.

9722You

9723talk


9724of

9725debate,

9726BJP

9727does

9728not

9729indulge


9730in

9731any

9732debate,"

9733Farooq

9734told

9735	reporters

9736here.

9737
Addressing
	
9738a

9739	gathering


9740of

9741former

9742army

9743	officials

9744from

9745India

9746and

9747Pakistan


9748at

9749the

9750	residence


9751of

9752former

9753	Samajwadi

9754Party

9755leader

9756Amar

9757Singh,

9758Farooq

9759said

9760both

9761the

9762	countries

9763will

9764have


9765to

9766live

9767together

9768for

9769prosperity.


9770On

9771Pakistan

9772
repeatedly

9773raising

9774the

9775Kashmir

9776issue,


9777he

9778said,

9779"you

9780
(Pakistan)

9781cannot

9782win

9783Kashmir.
	
9784I

9785can

9786write

9787this

9788with


9789my

9790blood."

9791The

9792National

9793
Conference

9794leader

9795said

9796his

9797maternal

9798grandfather

9799was

9800buried


9801in

9802Lahore

9803but


9804he

9805was

9806not

9807being

9808allowed


9809to

9810visit

9811the

9812place.


9813On

9814
Pakistan's

9815fear

9816that

9817India

9818would

9819divert

9820waters


9821of

9822Jhelum,

9823Chenab

9824and

9825Indus

9826rivers


9827to

9828create

9829water

9830scarcity


9831in

9832the

9833neighbouring

9834country,


9835he

9836said

9837New

9838Delhi

9839would

9840never

9841resort


9842to

9843such
	
9844a

9845tactic

9846	Reference

9847Documentation

9848Next

9849Spring

9850	Framework

9851	Reference

9852Documentation

98533.1

9854	Copyright


9855©

9856	2004-2011

9857Rod

9858Johnson,

9859Juergen

9860Hoeller,

9861Keith

9862Donald,

9863Colin

9864Sampaleanu,

9865Rob

9866Harrop,

9867Alef

9868	Arendsen,

9869Thomas

9870Risberg,

9871Darren

9872Davison,

9873Dmitriy

9874
Kopylenko,

9875Mark

9876Pollack,

9877Thierry

9878	Templier,

9879Erwin

9880Vervaet,

9881Portia

9882Tung,

9883Ben

9884Hale,

9885Adrian

9886Colyer,

9887John

9888Lewis,

9889Costin

9890Leau,

9891Mark

9892Fisher,

9893Sam

9894Brannen,

9895Ramnivas

9896Laddad,

9897Arjen

9898Poutsma,

9899Chris

9900Beams,

9901Tareq

9902
Abedrabbo,

9903Andy

9904Clement,

9905Dave

9906Syer,

9907Oliver

9908Gierke,

9909Rossen

9910
Stoyanchev

9911Copies


9912of

9913this

9914document

9915may


9916be

9917made

9918for

9919your

9920own

9921use

9922and

9923for

9924distribution


9925to

9926others,

9927provided

9928that

9929you


9930do

9931not

9932charge

9933any

9934fee

9935for

9936such

9937copies

9938and

9939further

9940provided

9941that

9942each

9943copy

9944contains

9945this

9946	Copyright

9947Notice,

9948whether

9949distributed


9950in

9951print


9952or

9953electronically.

9954Table


9955of

9956Contents


9957I.

9958Overview


9959of

9960Spring

9961	Framework


99621.

9963Introduction


9964to

9965Spring

9966	Framework

99671.1.

9968
Dependency

9969	Injection

9970and

9971	Inversion


9972of

9973Control

99741.2.

9975Modules

99761.2.1.

9977Core

9978	Container

99791.2.2.

9980Data

9981Access/Integration

99821.2.3.

9983Web

99841.2.4.

9985AOP

9986and

9987Instrumentation

99881.2.5.

9989Test

99901.3.

9991Usage

9992	scenarios

99931.3.1.

9994
Dependency

9995
Management

9996and

9997Naming

9998Conventions

99991.3.1.1.

10000Spring

10001Dependencies

10002and

10003	Depending

10004on

10005Spring

100061.3.1.2.

10007Maven

10008
Dependency

10009
Management

100101.3.1.3.

10011Ivy

10012
Dependency

10013
Management

100141.3.2.

10015Logging

100161.3.2.1.

10017Not

10018Using

10019Commons

10020Logging

100211.3.2.2.

10022Using

10023SLF4J

100241.3.2.3.

10025Using

10026Log4J

10027II.

10028What's

10029New

10030in

10031Spring


100323

100332.

10034New

10035Features

10036and

10037Enhancements

10038in

10039Spring

100403.0

100412.1.

10042Java


100435

100442.2.

10045Improved

10046documentation

100472.3.

10048New

10049articles

10050and

10051	tutorials

100522.4.

10053New

10054module

10055organization

10056and

10057build

10058system

100592.5.

10060Overview

10061of

10062new

10063features

100642.5.1.

10065Core

10066APIs

10067updated

10068for

10069Java


100705

100712.5.2.

10072Spring

10073
Expression

10074Language

100752.5.3.

10076The

10077	Inversion

10078of

10079Control

10080(IoC)

10081	container

100822.5.3.1.

10083Java

10084based

10085bean

10086metadata

100872.5.3.2.

10088Defining

10089bean

10090metadata

10091within

10092
components

100932.5.4.

10094General

10095purpose

10096type

10097
conversion

10098system

10099and

10100field

10101
formatting

10102system

101032.5.5.

10104The

10105Data

10106Tier

101072.5.6.

10108The

10109Web

10110Tier

101112.5.6.1.

10112Comprehensive

10113REST

10114support

101152.5.6.2.

10116@MVC

10117	additions

101182.5.7.

10119Declarative

10120model

10121
validation

101222.5.8.

10123Early

10124support

10125for

10126Java

10127EE


101286

101292.5.9.

10130Support

10131for

10132embedded

10133	databases

101343.

10135New

10136Features

10137and

10138Enhancements

10139in

10140Spring

101413.1

101423.1.

10143Overview

10144of

10145new

10146features

101473.1.1.

10148Cache

10149Abstraction

101503.1.2.

10151Bean

10152
Definition

10153Profiles

101543.1.3.

10155Environment

10156Abstraction

101573.1.4.

10158PropertySource

10159Abstraction

101603.1.5.

10161Code

10162equivalents

10163for

10164Spring's

10165XML

10166
namespaces

101673.1.6.

10168Builder-style

10169APIs

10170for

10171
code-based

10172	Hibernate

10173configuration

101743.1.7.

10175TestContext

10176	framework

10177support

10178for

10179@Configuration

10180classes

10181and

10182bean

10183
definition

10184profiles

101853.1.8.

10186c:

10187	namespace

10188for

10189more

10190concise

10191constructor

10192	injection

101933.1.9.

10194Support

10195for

10196	injection

10197against

10198non-standard

10199	JavaBeans

10200setters

102013.1.10.

10202Support

10203for

10204Servlet


102053

10206
code-based

10207configuration

10208of

10209Servlet

10210	Container

102113.1.11.

10212Support

10213for

10214Servlet


102153

10216MultipartResolver

102173.1.12.

10218JPA

10219EntityManagerFactory

10220bootstrapping

10221without

10222persistence.xml

102233.1.13.

10224New

10225HandlerMethod-based

10226Support

10227Classes

10228For

10229	Annotated

10230
Controller

10231
Processing

102323.1.14.

10233Consumes

10234and

10235Produces

10236@RequestMapping

10237
Conditions

102383.1.15.

10239Working

10240With

10241URI

10242Template

10243	Variables

10244In

10245
Controller

10246Methods

102473.1.16.

10248
Validation

10249For

10250@RequestBody

10251Method

10252	Arguments

10253III.

10254Core

10255Technologies

102564.

10257The

10258IoC

10259	container

102604.1.

10261Introduction

10262to

10263the

10264Spring

10265IoC

10266	container

10267and

10268beans

102694.2.

10270	Container

10271overview

102724.2.1.

10273Configuration

10274metadata

102754.2.2.

10276Instantiating


10277a

10278	container

102794.2.2.1.

10280	Composing

10281	XML-based

10282configuration

10283metadata

102844.2.3.

10285Using

10286the

10287	container

102884.3.

10289Bean

10290overview

102914.3.1.

10292Naming

10293beans

102944.3.1.1.

10295Aliasing


10296a

10297bean

10298outside

10299the

10300bean

10301
definition

103024.3.2.

10303Instantiating

10304beans

103054.3.2.1.

10306Instantiation

10307with


10308a

10309constructor

103104.3.2.2.

10311Instantiation

10312with


10313a

10314static

10315factory

10316method

103174.3.2.3.

10318Instantiation

10319using

10320an

10321instance

10322factory

10323method

103244.4.

10325Dependencies

103264.4.1.

10327
Dependency

10328	injection

103294.4.1.1.

10330Constructor-based

10331
dependency

10332	injection

103334.4.1.2.

10334Setter-based

10335
dependency

10336	injection

103374.4.1.3.

10338
Dependency

10339
resolution

10340process

103414.4.1.4.

10342Examples

10343of

10344
dependency

10345	injection

103464.4.2.

10347Dependencies

10348and

10349configuration

10350in

10351detail

103524.4.2.1.

10353Straight

10354values

10355(primitives,

10356Strings,

10357and

10358so

10359on)

103604.4.2.2.

10361
References

10362to

10363other

10364beans

10365(collaborators)

103664.4.2.3.

10367Inner

10368beans

103694.4.2.4.

10370Collections

103714.4.2.5.

10372Null

10373and

10374empty

10375string

10376values

103774.4.2.6.

10378XML

10379shortcut

10380with

10381the

10382p-namespace

103834.4.2.7.

10384XML

10385shortcut

10386with

10387the

10388c-namespace

103894.4.2.8.

10390Compound

10391property

10392names

103934.4.3.

10394Using

10395
depends-on

103964.4.4.

10397Lazy-initialized

10398beans

103994.4.5.

10400
Autowiring

10401collaborators

104024.4.5.1.

10403Limitations

10404and

10405disadvantages

10406of

10407
autowiring

104084.4.5.2.

10409	Excluding


10410a

10411bean

10412from

10413
autowiring

104144.4.6.

10415Method

10416	injection

104174.4.6.1.

10418Lookup

10419method

10420	injection

104214.4.6.2.

10422	Arbitrary

10423method

10424replacement

104254.5.

10426Bean

10427scopes

104284.5.1.

10429The

10430	singleton

10431scope

104324.5.2.

10433The

10434	prototype

10435scope

104364.5.3.

10437	Singleton

10438beans

10439with

10440prototype-bean

10441dependencies

104424.5.4.

10443Request,

10444session,

10445and

10446global

10447session

10448scopes

104494.5.4.1.

10450Initial

10451web

10452configuration

104534.5.4.2.

10454Request

10455scope

104564.5.4.3.

10457Session

10458scope

104594.5.4.4.

10460Global

10461session

10462scope

104634.5.4.5.

10464Scoped

10465beans

10466as

10467dependencies

104684.5.5.

10469Custom

10470scopes

104714.5.5.1.

10472Creating


10473a

10474custom

10475scope

104764.5.5.2.

10477Using


10478a

10479custom

10480scope

104814.6.

10482Customizing

10483the

10484nature

10485of


10486a

10487bean

104884.6.1.

10489	Lifecycle

10490	callbacks

104914.6.1.1.

10492Initialization

10493	callbacks

104944.6.1.2.

10495Destruction

10496	callbacks

104974.6.1.3.

10498Default

10499initialization

10500and

10501destroy

10502methods

105034.6.1.4.

10504	Combining

10505	lifecycle

10506
mechanisms

105074.6.1.5.

10508Startup

10509and

10510shutdown

10511	callbacks

105124.6.1.6.

10513Shutting

10514down

10515the

10516Spring

10517IoC

10518	container

10519
gracefully

10520in

10521non-web

10522applications

105234.6.2.
 
10524ApplicationContextAware

10525and

10526BeanNameAware

105274.6.3.

10528Other

10529Aware

10530
interfaces

105314.7.

10532Bean

10533
definition

10534inheritance

105354.8.

10536	Container

10537	Extension

10538Points

105394.8.1.

10540Customizing

10541beans

10542using


10543a

10544BeanPostProcessor

105454.8.1.1.

10546Example:

10547Hello

10548World,
 
10549BeanPostProcessor-style

105504.8.1.2.

10551Example:

10552The
,
10553#RequiredAnnotationBeanPostProcessor

105544.8.2.

10555Customizing

10556configuration

10557metadata

10558with


10559a
!
10560BeanFactoryPostProcessor

105614.8.2.1.

10562Example:

10563the
&
10564PropertyPlaceholderConfigurer

105654.8.2.2.

10566Example:

10567the
#
10568PropertyOverrideConfigurer

105694.8.3.

10570Customizing

10571instantiation

10572logic

10573with


10574a

10575FactoryBean

105764.9.

10577Annotation-based

10578	container

10579configuration

105804.9.1.

10581	@Required

105824.9.2.

10583
@Autowired

10584and

10585@Inject

105864.9.3.

10587Fine-tuning

10588annotation-based

10589
autowiring

10590with

10591
qualifiers

105924.9.4.
!
10593CustomAutowireConfigurer

105944.9.5.

10595	@Resource

105964.9.6.

10597@PostConstruct

10598and

10599@PreDestroy

106004.10.

10601	Classpath

10602scanning

10603and

10604managed

10605
components

106064.10.1.

10607
@Component

10608and

10609further

10610
stereotype

10611annotations

106124.10.2.

10613Automatically

10614	detecting

10615classes

10616and

10617registering

10618bean

10619definitions

106204.10.3.

10621Using

10622filters

10623to

10624	customize

10625scanning

106264.10.4.

10627Defining

10628bean

10629metadata

10630within

10631
components

106324.10.5.

10633Naming

10634autodetected

10635
components

106364.10.6.

10637	Providing


10638a

10639scope

10640for

10641autodetected

10642
components

106434.10.7.

10644	Providing

10645	qualifier

10646metadata

10647with

10648annotations

106494.11.

10650Using

10651JSR

10652330

10653standard

10654annotations

106554.11.1.

10656
Dependency

10657	Injection

10658with

10659@Inject

10660and

10661@Named

106624.11.2.

10663@Named:


10664a

10665standard

10666
equivalent

10667to

10668the

10669
@Component

10670
annotation

106714.11.3.

10672Limitations

10673of

10674the

10675standard

10676approach

106774.12.

10678
Java-based

10679	container

10680configuration

106814.12.1.

10682Basic

10683	concepts:

10684@Configuration

10685and

10686@Bean

106874.12.2.

10688Instantiating

10689the

10690Spring

10691	container

10692using
+
10693"AnnotationConfigApplicationContext

10694	4.12.2.1.

10695Simple

10696construction

10697	4.12.2.2.

10698Building

10699the

10700	container

10701programmatically

10702using

10703register(Class<?>...)

10704	4.12.2.3.

10705Enabling

10706	component

10707scanning

10708with

10709scan(String...)

10710	4.12.2.4.

10711Support

10712for

10713web

10714applications

10715with
.
10716%AnnotationConfigWebApplicationContext

107174.12.3.

10718	Composing

10719
Java-based

10720configurations

10721	4.12.3.1.

10722Using

10723the

10724@Import

10725
annotation

10726	4.12.3.2.

10727	Combining

10728Java

10729and

10730XML

10731configuration

107324.12.4.

10733Using

10734the

10735@Bean

10736
annotation

10737	4.12.4.1.

10738	Declaring


10739a

10740bean

10741	4.12.4.2.

10742	Injecting

10743dependencies

10744	4.12.4.3.

10745	Receiving

10746	lifecycle

10747	callbacks

10748	4.12.4.4.

10749
Specifying

10750bean

10751scope

10752	4.12.4.5.

10753Customizing

10754bean

10755naming

10756	4.12.4.6.

10757Bean

10758aliasing

107594.12.5.

10760Further

10761information

10762about

10763how

10764
Java-based

10765configuration

10766works

10767
internally

107684.13.

10769Registering


10770a

10771LoadTimeWeaver

107724.14.

10773
Additional

10774Capabilities

10775of

10776the

10777ApplicationContext

107784.14.1.

10779Internationalization

10780using

10781MessageSource

107824.14.2.

10783Standard

10784and

10785Custom

10786Events

107874.14.3.

10788
Convenient

10789access

10790to

10791	low-level

10792	resources

107934.14.4.

10794
Convenient

10795ApplicationContext

10796instantiation

10797for

10798web

10799applications

108004.14.5.

10801	Deploying


10802a

10803Spring

10804ApplicationContext

10805as


10806a

10807J2EE

10808RAR

10809file

108104.15.

10811The

10812BeanFactory

108134.15.1.

10814BeanFactory

10815or

10816ApplicationContext?

108174.15.2.

10818Glue

10819code

10820and

10821the

10822evil

10823	singleton

108245.

10825	Resources

108265.1.

10827Introduction

108285.2.

10829The

10830Resource

10831	interface

108325.3.

10833Built-in

10834Resource

10835implementations

108365.3.1.

10837UrlResource

108385.3.2.

10839ClassPathResource

108405.3.3.

10841FileSystemResource

108425.3.4.

10843ServletContextResource

108445.3.5.

10845InputStreamResource

108465.3.6.

10847ByteArrayResource

108485.4.

10849The

10850ResourceLoader

108515.5.

10852The

10853ResourceLoaderAware

10854	interface

108555.6.

10856	Resources

10857as

10858dependencies

108595.7.

10860Application

10861contexts

10862and

10863Resource

10864paths

108655.7.1.

10866Constructing

10867application

10868contexts

108695.7.1.1.

10870Constructing
'
10871ClassPathXmlApplicationContext

10872	instances


10873-

10874	shortcuts

108755.7.2.

10876	Wildcards

10877in

10878application

10879context

10880constructor

10881resource

10882paths

108835.7.2.1.

10884	Ant-style

10885Patterns

108865.7.2.2.

10887The

10888classpath*:

10889prefix

108905.7.2.3.

10891Other

10892notes

10893relating

10894to

10895	wildcards

108965.7.3.

10897FileSystemResource

10898caveats

108996.

10900Validation,

10901Data

10902Binding,

10903and

10904Type

10905
Conversion

109066.1.

10907Introduction

109086.2.

10909
Validation

10910using

10911Spring's

10912	Validator

10913	interface

109146.3.

10915	Resolving

10916codes

10917to

10918error

10919messages

109206.4.

10921Bean

10922manipulation

10923and

10924the

10925BeanWrapper

109266.4.1.

10927Setting

10928and

10929getting

10930basic

10931and

10932nested

10933
properties

109346.4.2.

10935Built-in

10936PropertyEditor

10937implementations

109386.4.2.1.

10939Registering

10940
additional

10941custom

10942PropertyEditors

109436.5.

10944Spring


109453

10946Type

10947
Conversion

109486.5.1.

10949	Converter

10950SPI

109516.5.2.

10952ConverterFactory

109536.5.3.

10954GenericConverter

109556.5.3.1.
$
10956ConditionalGenericConverter

109576.5.4.

10958ConversionService

10959API

109606.5.5.

10961Configuring


10962a

10963ConversionService

109646.5.6.

10965Using


10966a

10967ConversionService

10968programatically

109696.6.

10970Spring


109713

10972Field

10973
Formatting

109746.6.1.

10975	Formatter

10976SPI

109776.6.2.

10978Annotation-driven

10979
Formatting

109806.6.2.1.

10981Format

10982
Annotation

10983API

109846.6.3.

10985FormatterRegistry

10986SPI

109876.6.4.

10988FormatterRegistrar

10989SPI

109906.6.5.

10991Configuring

10992
Formatting

10993in

10994Spring

10995MVC

109966.7.

10997Spring


109983

10999
Validation

110006.7.1.

11001Overview

11002of

11003the

11004JSR-303

11005Bean

11006
Validation

11007API

110086.7.2.

11009Configuring


11010a

11011Bean

11012
Validation

11013Implementation

110146.7.2.1.

11015	Injecting


11016a

11017	Validator

110186.7.2.2.

11019Configuring

11020Custom

11021Constraints

110226.7.2.3.

11023
Additional

11024Configuration

11025Options

110266.7.3.

11027Configuring


11028a

11029
DataBinder

110306.7.4.

11031Spring

11032MVC


110333

11034
Validation

110356.7.4.1.

11036
Triggering

11037@Controller

11038Input

11039
Validation

110406.7.4.2.

11041Configuring


11042a

11043	Validator

11044for

11045use

11046by

11047Spring

11048MVC

110496.7.4.3.

11050Configuring


11051a

11052JSR-303

11053	Validator

11054for

11055use

11056by

11057Spring

11058MVC

110597.

11060Spring

11061
Expression

11062Language

11063(SpEL)

110647.1.

11065Introduction

110667.2.

11067Feature

11068Overview

110697.3.

11070
Expression

11071
Evaluation

11072using

11073Spring's

11074
Expression

11075	Interface

110767.3.1.

11077The

11078EvaluationContext

11079	interface

110807.3.1.1.

11081Type

11082
Conversion

110837.4.

11084
Expression

11085support

11086for

11087defining

11088bean

11089definitions

110907.4.1.

11091XML

11092based

11093configuration

110947.4.2.

11095Annotation-based

11096configuration

110977.5.

11098Language

11099	Reference

111007.5.1.

11101Literal

11102expressions

111037.5.2.

11104Properties,

11105Arrays,

11106Lists,

11107Maps,

11108Indexers

111097.5.3.

11110Inline

11111lists

111127.5.4.

11113Array

11114construction

111157.5.5.

11116Methods

111177.5.6.

11118	Operators

111197.5.6.1.

11120
Relational

11121	operators

111227.5.6.2.

11123Logical

11124	operators

111257.5.6.3.

11126Mathematical

11127	operators

111287.5.7.

11129
Assignment

111307.5.8.

11131Types

111327.5.9.

11133Constructors

111347.5.10.

11135	Variables

11136	7.5.10.1.

11137The

11138#this

11139and

11140#root

11141	variables

111427.5.11.

11143	Functions

111447.5.12.

11145Bean

11146
references

111477.5.13.

11148Ternary

11149Operator

11150(If-Then-Else)

111517.5.14.

11152The

11153Elvis

11154Operator

111557.5.15.

11156Safe

11157
Navigation

11158operator

111597.5.16.

11160
Collection

11161	Selection

111627.5.17.

11163
Collection

11164
Projection

111657.5.18.

11166
Expression

11167
templating

111687.6.

11169Classes

11170used

11171in

11172the

11173examples

111748.

11175Aspect

11176Oriented

11177Programming

11178with

11179Spring

111808.1.

11181Introduction

111828.1.1.

11183AOP

11184concepts

111858.1.2.

11186Spring

11187AOP

11188capabilities

11189and

11190goals

111918.1.3.

11192AOP

11193Proxies

111948.2.

11195@AspectJ

11196support

111978.2.1.

11198Enabling

11199@AspectJ

11200Support

112018.2.2.

11202	Declaring

11203an

11204aspect

112058.2.3.

11206	Declaring


11207a

11208pointcut

112098.2.3.1.

11210	Supported

11211Pointcut

11212Designators

112138.2.3.2.

11214	Combining

11215pointcut

11216expressions

112178.2.3.3.

11218Sharing

11219common

11220pointcut

11221definitions

112228.2.3.4.

11223Examples

112248.2.3.5.

11225Writing

11226good

11227	pointcuts

112288.2.4.

11229	Declaring

11230advice

112318.2.4.1.

11232Before

11233advice

112348.2.4.2.

11235After

11236	returning

11237advice

112388.2.4.3.

11239After

11240throwing

11241advice

112428.2.4.4.

11243After

11244	(finally)

11245advice

112468.2.4.5.

11247Around

11248advice

112498.2.4.6.

11250Advice

11251
parameters

112528.2.4.7.

11253Advice

11254ordering

112558.2.5.

11256Introductions

112578.2.6.

11258Aspect

11259instantiation

11260models

112618.2.7.

11262Example

112638.3.

11264Schema-based

11265AOP

11266support

112678.3.1.

11268	Declaring

11269an

11270aspect

112718.3.2.

11272	Declaring


11273a

11274pointcut

112758.3.3.

11276	Declaring

11277advice

112788.3.3.1.

11279Before

11280advice

112818.3.3.2.

11282After

11283	returning

11284advice

112858.3.3.3.

11286After

11287throwing

11288advice

112898.3.3.4.

11290After

11291	(finally)

11292advice

112938.3.3.5.

11294Around

11295advice

112968.3.3.6.

11297Advice

11298
parameters

112998.3.3.7.

11300Advice

11301ordering

113028.3.4.

11303Introductions

113048.3.5.

11305Aspect

11306instantiation

11307models

113088.3.6.

11309Advisors

113108.3.7.

11311Example

113128.4.

11313Choosing

11314which

11315AOP

11316declaration

11317style

11318to

11319use

113208.4.1.

11321Spring

11322AOP

11323or

11324full

11325AspectJ?

113268.4.2.

11327@AspectJ

11328or

11329XML

11330for

11331Spring

11332AOP?

113338.5.

11334Mixing

11335aspect

11336types

113378.6.

11338Proxying

11339
mechanisms

113408.6.1.

11341Understanding

11342AOP

11343proxies

113448.7.

11345Programmatic

11346creation

11347of

11348@AspectJ

11349Proxies

113508.8.

11351Using

11352AspectJ

11353with

11354Spring

11355applications

113568.8.1.

11357Using

11358AspectJ

11359to

11360
dependency

11361inject

11362domain

11363objects

11364with

11365Spring

113668.8.1.1.

11367Unit

11368testing

11369@Configurable

11370objects

113718.8.1.2.

11372Working

11373with

11374multiple

11375application

11376contexts

113778.8.2.

11378Other

11379Spring

11380aspects

11381for

11382AspectJ

113838.8.3.

11384Configuring

11385AspectJ

11386aspects

11387using

11388Spring

11389IoC

113908.8.4.

11391	Load-time

11392weaving

11393with

11394AspectJ

11395in

11396the

11397Spring

11398	Framework

113998.8.4.1.


11400A

11401first

11402example

114038.8.4.2.

11404Aspects

114058.8.4.3.

11406'META-INF/aop.xml'

114078.8.4.4.

11408Required

11409	libraries

11410(JARS)

114118.8.4.5.

11412Spring

11413configuration

114148.8.4.6.

11415Environment-specific

11416configuration

114178.9.

11418Further

11419	Resources

114209.

11421Spring

11422AOP

11423APIs

114249.1.

11425Introduction

114269.2.

11427Pointcut

11428API

11429in

11430Spring

114319.2.1.

11432Concepts

114339.2.2.

11434
Operations

11435on

11436	pointcuts

114379.2.3.

11438AspectJ

11439
expression

11440	pointcuts

114419.2.4.

11442Convenience

11443pointcut

11444implementations

114459.2.4.1.

11446Static

11447	pointcuts

114489.2.4.2.

11449Dynamic

11450	pointcuts

114519.2.5.

11452Pointcut

11453superclasses

114549.2.6.

11455Custom

11456	pointcuts

114579.3.

11458Advice

11459API

11460in

11461Spring

114629.3.1.

11463Advice

11464
lifecycles

114659.3.2.

11466Advice

11467types

11468in

11469Spring

114709.3.2.1.

11471Interception

11472around

11473advice

114749.3.2.2.

11475Before

11476advice

114779.3.2.3.

11478Throws

11479advice

114809.3.2.4.

11481After

11482	Returning

11483advice

114849.3.2.5.

11485Introduction

11486advice

114879.4.

11488Advisor

11489API

11490in

11491Spring

114929.5.

11493Using

11494the

11495ProxyFactoryBean

11496to

11497create

11498AOP

11499proxies

115009.5.1.

11501Basics

115029.5.2.

11503JavaBean

11504
properties

115059.5.3.

11506JDK-

11507and

11508CGLIB-based

11509proxies

115109.5.4.

11511Proxying

11512
interfaces

115139.5.5.

11514Proxying

11515classes

115169.5.6.

11517Using

11518'global'

11519advisors

115209.6.

11521Concise

11522proxy

11523definitions

115249.7.

11525Creating

11526AOP

11527proxies

11528programmatically

11529with

11530the

11531ProxyFactory

115329.8.

11533Manipulating

11534advised

11535objects

115369.9.

11537Using

11538the

11539"autoproxy"

11540facility

115419.9.1.

11542	Autoproxy

11543bean

11544definitions

115459.9.1.1.
!
11546BeanNameAutoProxyCreator

115479.9.1.2.
'
11548DefaultAdvisorAutoProxyCreator

115499.9.1.3.
(
11550AbstractAdvisorAutoProxyCreator

115519.9.2.

11552Using

11553metadata-driven

11554auto-proxying

115559.10.

11556Using

11557TargetSources

115589.10.1.

11559Hot

11560	swappable

11561target

11562sources

115639.10.2.

11564Pooling

11565target

11566sources

115679.10.3.

11568	Prototype

11569target

11570sources

115719.10.4.

11572ThreadLocal

11573target

11574sources

115759.11.

11576Defining

11577new

11578Advice

11579types

115809.12.

11581Further

11582	resources

1158310.

11584Testing

1158510.1.

11586Introduction

11587to

11588testing

1158910.2.

11590Unit

11591testing

1159210.2.1.

11593Mock

11594objects

11595	10.2.1.1.

11596JNDI

11597	10.2.1.2.

11598Servlet

11599API

11600	10.2.1.3.

11601Portlet

11602API

1160310.2.2.

11604Unit

11605testing

11606support

11607classes

11608	10.2.2.1.

11609General

11610	utilities

11611	10.2.2.2.

11612Spring

11613MVC

1161410.3.

11615Integration

11616testing

1161710.3.1.

11618Overview

1161910.3.2.

11620Goals

11621of

11622integration

11623testing

11624	10.3.2.1.

11625Context

11626
management

11627and

11628caching

11629	10.3.2.2.

11630
Dependency

11631	Injection

11632of

11633test

11634fixtures

11635	10.3.2.3.

11636Transaction

11637
management

11638	10.3.2.4.

11639Support

11640classes

11641for

11642integration

11643testing

1164410.3.3.

11645JDBC

11646testing

11647support

1164810.3.4.

11649Annotations

1165010.3.5.

11651Spring

11652TestContext

11653	Framework

11654	10.3.5.1.

11655Key

11656abstractions

11657	10.3.5.2.

11658Context

11659
management

11660and

11661caching

11662	10.3.5.3.

11663
Dependency

11664	Injection

11665of

11666test

11667fixtures

11668	10.3.5.4.

11669Transaction

11670
management

11671	10.3.5.5.

11672TestContext

11673support

11674classes

1167510.3.6.

11676	PetClinic

11677example

1167810.4.

11679Further

11680	Resources

11681IV.

11682Data

11683Access

1168411.

11685Transaction

11686
Management

1168711.1.

11688Introduction

11689to

11690Spring

11691	Framework

11692transaction

11693
management

1169411.2.

11695
Advantages

11696of

11697the

11698Spring

11699Framework's

11700transaction

11701support

11702model

1170311.2.1.

11704Global

11705transactions

1170611.2.2.

11707Local

11708transactions

1170911.2.3.

11710Spring

11711Framework's

11712
consistent

11713programming

11714model

1171511.3.

11716Understanding

11717the

11718Spring

11719	Framework

11720transaction

11721abstraction

1172211.4.

11723Synchronizing

11724	resources

11725with

11726transactions

1172711.4.1.

11728
High-level

11729synchronization

11730approach

1173111.4.2.

11732	Low-level

11733synchronization

11734approach

1173511.4.3.
(
11736TransactionAwareDataSourceProxy

1173711.5.

11738Declarative

11739transaction

11740
management

1174111.5.1.

11742Understanding

11743the

11744Spring

11745Framework's

11746declarative

11747transaction

11748implementation

1174911.5.2.

11750Example

11751of

11752declarative

11753transaction

11754implementation

1175511.5.3.

11756Rolling

11757back


11758a

11759declarative

11760transaction

1176111.5.4.

11762Configuring

11763	different

11764transactional

11765	semantics

11766for

11767	different

11768beans

1176911.5.5.

11770<tx:advice/>

11771settings

1177211.5.6.

11773Using

11774@Transactional

11775	11.5.6.1.

11776@Transactional

11777settings

11778	11.5.6.2.

11779Multiple

11780Transaction

11781Managers

11782with

11783@Transactional

11784	11.5.6.3.

11785Custom

11786shortcut

11787annotations

1178811.5.7.

11789Transaction

11790propagation

11791	11.5.7.1.

11792Required

11793	11.5.7.2.

11794RequiresNew

11795	11.5.7.3.

11796Nested

1179711.5.8.

11798Advising

11799transactional

11800
operations

1180111.5.9.

11802Using

11803@Transactional

11804with

11805AspectJ

1180611.6.

11807Programmatic

11808transaction

11809
management

1181011.6.1.

11811Using

11812the

11813TransactionTemplate

11814	11.6.1.1.

11815
Specifying

11816transaction

11817settings

1181811.6.2.

11819Using

11820the
#
11821PlatformTransactionManager

1182211.7.

11823Choosing

11824between

11825programmatic

11826and

11827declarative

11828transaction

11829
management

1183011.8.

11831Application

11832server-specific

11833integration

1183411.8.1.

11835IBM

11836	WebSphere

1183711.8.2.

11838BEA

11839WebLogic

11840Server

1184111.8.3.

11842Oracle

11843OC4J

1184411.9.

11845	Solutions

11846to

11847common

11848problems

1184911.9.1.

11850Use

11851of

11852the

11853wrong

11854transaction

11855manager

11856for


11857a

11858specific

11859
DataSource

1186011.10.

11861Further

11862	Resources

1186312.

11864DAO

11865support

1186612.1.

11867Introduction

1186812.2.

11869
Consistent

11870	exception

11871	hierarchy

1187212.3.

11873Annotations

11874used

11875for

11876configuring

11877DAO

11878or

11879
Repository

11880classes

1188113.

11882Data

11883access

11884with

11885JDBC

1188613.1.

11887Introduction

11888to

11889Spring

11890	Framework

11891JDBC

1189213.1.1.

11893Choosing

11894an

11895approach

11896for

11897JDBC

11898database

11899access

1190013.1.2.

11901Package

11902	hierarchy

1190313.2.

11904Using

11905the

11906JDBC

11907core

11908classes

11909to

11910control

11911basic

11912JDBC

11913
processing

11914and

11915error

11916handling

1191713.2.1.

11918JdbcTemplate

11919	13.2.1.1.

11920Examples

11921of

11922JdbcTemplate

11923class

11924usage

11925	13.2.1.2.

11926JdbcTemplate

11927best

11928	practices

1192913.2.2.
#
11930NamedParameterJdbcTemplate

1193113.2.3.

11932SimpleJdbcTemplate

1193313.2.4.

11934SQLExceptionTranslator

1193513.2.5.

11936	Executing

11937
statements

1193813.2.6.

11939Running

11940queries

1194113.2.7.

11942Updating

11943the

11944database

1194513.2.8.

11946
Retrieving

11947auto-generated

11948keys

1194913.3.

11950Controlling

11951database

11952connections

1195313.3.1.

11954
DataSource

1195513.3.2.

11956DataSourceUtils

1195713.3.3.

11958SmartDataSource

1195913.3.4.

11960AbstractDataSource

1196113.3.5.
#
11962SingleConnectionDataSource

1196313.3.6.
 
11964DriverManagerDataSource

1196513.3.7.
(
11966TransactionAwareDataSourceProxy

1196713.3.8.
%
11968DataSourceTransactionManager

1196913.3.9.

11970NativeJdbcExtractor

1197113.4.

11972JDBC

11973batch

11974
operations

1197513.4.1.

11976Basic

11977batch

11978
operations

11979with

11980the

11981JdbcTemplate

1198213.4.2.

11983Batch

11984
operations

11985with


11986a

11987List

11988of

11989objects

1199013.4.3.

11991Batch

11992
operations

11993with

11994multiple

11995batches

1199613.5.

11997Simplifying

11998JDBC

11999
operations

12000with

12001the

12002
SimpleJdbc

12003classes

1200413.5.1.

12005	Inserting

12006data

12007using

12008SimpleJdbcInsert

1200913.5.2.

12010
Retrieving

12011auto-generated

12012keys

12013using

12014SimpleJdbcInsert

1201513.5.3.

12016
Specifying

12017columns

12018for


12019a

12020SimpleJdbcInsert

1202113.5.4.

12022Using

12023SqlParameterSource

12024to

12025provide

12026	parameter

12027values

1202813.5.5.

12029Calling


12030a

12031stored

12032	procedure

12033with

12034SimpleJdbcCall

1203513.5.6.

12036
Explicitly

12037	declaring

12038
parameters

12039to

12040use

12041for


12042a

12043SimpleJdbcCall

1204413.5.7.

12045How

12046to

12047define

12048SqlParameters

1204913.5.8.

12050Calling


12051a

12052stored

12053function

12054using

12055SimpleJdbcCall

1205613.5.9.

12057	Returning

12058ResultSet/REF

12059Cursor

12060from


12061a

12062SimpleJdbcCall

1206313.6.

12064Modeling

12065JDBC

12066
operations

12067as

12068Java

12069objects

1207013.6.1.

12071SqlQuery

1207213.6.2.

12073MappingSqlQuery

1207413.6.3.

12075	SqlUpdate

1207613.6.4.

12077StoredProcedure

1207813.7.

12079Common

12080problems

12081with

12082	parameter

12083and

12084data

12085value

12086handling

1208713.7.1.

12088	Providing

12089SQL

12090type

12091information

12092for

12093
parameters

1209413.7.2.

12095Handling

12096BLOB

12097and

12098CLOB

12099objects

1210013.7.3.

12101Passing

12102in

12103lists

12104of

12105values

12106for

12107IN

12108clause

1210913.7.4.

12110Handling

12111complex

12112types

12113for

12114stored

12115	procedure

12116calls

1211713.8.

12118Embedded

12119database

12120support

1212113.8.1.

12122Why

12123use

12124an

12125embedded

12126	database?

1212713.8.2.

12128Creating

12129an

12130embedded

12131database

12132instance

12133using

12134Spring

12135XML

1213613.8.3.

12137Creating

12138an

12139embedded

12140database

12141instance

12142programmatically

1214313.8.4.

12144	Extending

12145the

12146embedded

12147database

12148support

1214913.8.5.

12150Using

12151HSQL

1215213.8.6.

12153Using

12154H2

1215513.8.7.

12156Using

12157Derby

1215813.8.8.

12159Testing

12160data

12161access

12162logic

12163with

12164an

12165embedded

12166database

1216713.9.

12168Initializing


12169a

12170
DataSource

1217113.9.1.

12172Initializing


12173a

12174database

12175instance

12176using

12177Spring

12178XML

12179	13.9.1.1.

12180Initialization

12181of

12182Other

12183
Components

12184that

12185Depend

12186on

12187the

12188Database

1218914.

12190Object

12191
Relational

12192Mapping

12193(ORM)

12194Data

12195Access

1219614.1.

12197Introduction

12198to

12199ORM

12200with

12201Spring

1220214.2.

12203General

12204ORM

12205integration

12206considerations

1220714.2.1.

12208Resource

12209and

12210transaction

12211
management

1221214.2.2.

12213	Exception

12214translation

1221514.3.

12216	Hibernate

1221714.3.1.

12218SessionFactory

12219setup

12220in


12221a

12222Spring

12223	container

1222414.3.2.

12225Implementing

12226DAOs

12227based

12228on

12229plain

12230	Hibernate


122313

12232API

1223314.3.3.

12234Declarative

12235transaction

12236demarcation

1223714.3.4.

12238Programmatic

12239transaction

12240demarcation

1224114.3.5.

12242Transaction

12243
management

12244
strategies

1224514.3.6.

12246	Comparing

12247container-managed

12248and

12249locally

12250defined

12251	resources

1225214.3.7.

12253Spurious

12254application

12255server

12256warnings

12257with

12258	Hibernate

1225914.4.

12260JDO

1226114.4.1.
"
12262PersistenceManagerFactory

12263setup

1226414.4.2.

12265Implementing

12266DAOs

12267based

12268on

12269the

12270plain

12271JDO

12272API

1227314.4.3.

12274Transaction

12275
management

1227614.4.4.

12277
JdoDialect

1227814.5.

12279JPA

1228014.5.1.

12281Three

12282options

12283for

12284JPA

12285setup

12286in


12287a

12288Spring

12289environment

12290	14.5.1.1.
&
12291LocalEntityManagerFactoryBean

12292	14.5.1.2.

12293	Obtaining

12294an

12295EntityManagerFactory

12296from

12297JNDI

12298	14.5.1.3.
/
12299&LocalContainerEntityManagerFactoryBean

12300	14.5.1.4.

12301Dealing

12302with

12303multiple

12304persistence

12305units

1230614.5.2.

12307Implementing

12308DAOs

12309based

12310on

12311plain

12312JPA

1231314.5.3.

12314Transaction

12315
Management

1231614.5.4.

12317
JpaDialect

1231814.6.

12319iBATIS

12320SQL

12321Maps

1232214.6.1.

12323Setting

12324up

12325the

12326SqlMapClient

1232714.6.2.

12328Using

12329SqlMapClientTemplate

12330and

12331SqlMapClientDaoSupport

1233214.6.3.

12333Implementing

12334DAOs

12335based

12336on

12337plain

12338iBATIS

12339API

1234015.

12341Marshalling

12342XML

12343using

12344O/X

12345Mappers

1234615.1.

12347Introduction

1234815.2.

12349
Marshaller

12350and

12351Unmarshaller

1235215.2.1.

12353
Marshaller

1235415.2.2.

12355Unmarshaller

1235615.2.3.

12357XmlMappingException

1235815.3.

12359Using

12360
Marshaller

12361and

12362Unmarshaller

1236315.4.

12364XML

12365Schema-based

12366Configuration

1236715.5.

12368JAXB

1236915.5.1.

12370Jaxb2Marshaller

12371	15.5.1.1.

12372XML

12373Schema-based

12374Configuration

1237515.6.

12376Castor

1237715.6.1.

12378CastorMarshaller

1237915.6.2.

12380Mapping

1238115.7.

12382XMLBeans

1238315.7.1.

12384XmlBeansMarshaller

12385	15.7.1.1.

12386XML

12387Schema-based

12388Configuration

1238915.8.

12390JiBX

1239115.8.1.

12392JibxMarshaller

12393	15.8.1.1.

12394XML

12395Schema-based

12396Configuration

1239715.9.

12398XStream

1239915.9.1.

12400XStreamMarshaller

12401V.

12402The

12403Web

1240416.

12405Web

12406MVC

12407	framework

1240816.1.

12409Introduction

12410to

12411Spring

12412Web

12413MVC

12414	framework

1241516.1.1.

12416Features

12417of

12418Spring

12419Web

12420MVC

1242116.1.2.

12422Pluggability

12423of

12424other

12425MVC

12426implementations

1242716.2.

12428The

12429DispatcherServlet

1243016.3.

12431Implementing

12432Controllers

1243316.3.1.

12434Defining


12435a

12436
controller

12437with

12438@Controller

1243916.3.2.

12440Mapping

12441Requests

12442With

12443@RequestMapping

12444	16.3.2.1.

12445URI

12446Template

12447Patterns

12448	16.3.2.2.

12449Path

12450Patterns

12451	16.3.2.3.

12452
Consumable

12453Media

12454Types

12455	16.3.2.4.

12456
Producible

12457Media

12458Types

12459	16.3.2.5.

12460Request

12461
Parameters

12462and

12463Header

12464Values

1246516.3.3.

12466Defining

12467@RequestMapping

12468handler

12469methods

12470	16.3.3.1.

12471	Supported

12472method

12473argument

12474types

12475	16.3.3.2.

12476	Supported

12477method

12478return

12479types

12480	16.3.3.3.

12481Binding

12482request

12483
parameters

12484to

12485method

12486
parameters

12487with

12488@RequestParam

12489	16.3.3.4.

12490Mapping

12491the

12492request

12493body

12494with

12495the

12496@RequestBody

12497
annotation

12498	16.3.3.5.

12499Mapping

12500the

12501response

12502body

12503with

12504the

12505@ResponseBody

12506
annotation

12507	16.3.3.6.

12508Using

12509HttpEntity<?>

12510	16.3.3.7.

12511Command

12512and

12513Form

12514Objects

12515	16.3.3.8.

12516
Specifying

12517
attributes

12518to

12519store

12520in


12521a

12522session

12523with

12524@SessionAttributes

12525	16.3.3.9.

12526Mapping

12527cookie

12528values

12529with

12530the

12531@CookieValue

12532
annotation

12533
16.3.3.10.

12534Mapping

12535request

12536header

12537
attributes

12538with

12539the

12540@RequestHeader

12541
annotation

12542
16.3.3.11.

12543Method

12544
Parameters

12545And

12546Type

12547
Conversion

12548
16.3.3.12.

12549Customizing

12550WebDataBinder

12551initialization

1255216.4.

12553Handler

12554mappings

1255516.4.1.

12556Intercepting

12557requests

12558with


12559a

12560HandlerInterceptor

1256116.5.

12562	Resolving

12563views

1256416.5.1.

12565	Resolving

12566views

12567with

12568the

12569ViewResolver

12570	interface

1257116.5.2.

12572Chaining

12573ViewResolvers

1257416.5.3.

12575Redirecting

12576to

12577views

12578	16.5.3.1.

12579RedirectView

12580	16.5.3.2.

12581The

12582	redirect:

12583prefix

12584	16.5.3.3.

12585The

12586forward:

12587prefix

1258816.5.4.
'
12589ContentNegotiatingViewResolver

1259016.6.

12591Using

12592locales

1259316.6.1.
#
12594AcceptHeaderLocaleResolver

1259516.6.2.

12596CookieLocaleResolver

1259716.6.3.

12598SessionLocaleResolver

1259916.6.4.
 
12600LocaleChangeInterceptor

1260116.7.

12602Using

12603themes

1260416.7.1.

12605Overview

12606of

12607themes

1260816.7.2.

12609Defining

12610themes

1261116.7.3.

12612Theme

12613	resolvers

1261416.8.

12615Spring's

12616	multipart

12617(fileupload)

12618support

1261916.8.1.

12620Introduction

1262116.8.2.

12622Using

12623the

12624MultipartResolver

1262516.8.3.

12626Handling


12627a

12628file

12629upload

12630in


12631a

12632form

1263316.9.

12634Handling

12635
exceptions

1263616.9.1.
!
12637HandlerExceptionResolver

1263816.9.2.

12639@ExceptionHandler

1264016.10.

12641
Convention

12642over

12643configuration

12644support

1264516.10.1.

12646The

12647
Controller
*
12648!ControllerClassNameHandlerMapping

1264916.10.2.

12650The

12651Model

12652ModelMap

12653(ModelAndView)

1265416.10.3.

12655The

12656View


12657-
$
12658RequestToViewNameTranslator

1265916.11.

12660ETag

12661support

1266216.12.

12663Configuring

12664Spring

12665MVC

1266616.12.1.

12667mvc:annotation-driven

1266816.12.2.

12669mvc:interceptors

1267016.12.3.

12671mvc:view-controller

1267216.12.4.

12673mvc:resources

1267416.12.5.
$
12675mvc:default-servlet-handler

1267616.13.

12677More

12678Spring

12679Web

12680MVC

12681	Resources

1268217.

12683View

12684technologies

1268517.1.

12686Introduction

1268717.2.

12688JSP


12689&

12690JSTL

1269117.2.1.

12692View

12693	resolvers

1269417.2.2.

12695'Plain-old'

12696JSPs

12697versus

12698JSTL

1269917.2.3.

12700
Additional

12701tags

12702facilitating

12703development

1270417.2.4.

12705Using

12706Spring's

12707form

12708tag

12709library

12710	17.2.4.1.

12711Configuration

12712	17.2.4.2.

12713The

12714form

12715tag

12716	17.2.4.3.

12717The

12718input

12719tag

12720	17.2.4.4.

12721The

12722checkbox

12723tag

12724	17.2.4.5.

12725The

12726
checkboxes

12727tag

12728	17.2.4.6.

12729The

12730radiobutton

12731tag

12732	17.2.4.7.

12733The

12734radiobuttons

12735tag

12736	17.2.4.8.

12737The

12738password

12739tag

12740	17.2.4.9.

12741The

12742select

12743tag

12744
17.2.4.10.

12745The

12746option

12747tag

12748
17.2.4.11.

12749The

12750options

12751tag

12752
17.2.4.12.

12753The

12754textarea

12755tag

12756
17.2.4.13.

12757The

12758hidden

12759tag

12760
17.2.4.14.

12761The

12762errors

12763tag

12764
17.2.4.15.

12765HTTP

12766Method

12767
Conversion

1276817.3.

12769Tiles

1277017.3.1.

12771Dependencies

1277217.3.2.

12773How

12774to

12775	integrate

12776Tiles

12777	17.3.2.1.

12778UrlBasedViewResolver

12779	17.3.2.2.
#
12780ResourceBundleViewResolver

12781	17.3.2.3.
$
12782SimpleSpringPreparerFactory

12783and
"
12784SpringBeanPreparerFactory

1278517.4.

12786Velocity


12787&

12788
FreeMarker

1278917.4.1.

12790Dependencies

1279117.4.2.

12792Context

12793configuration

1279417.4.3.

12795Creating

12796	templates

1279717.4.4.

12798Advanced

12799configuration

12800	17.4.4.1.

12801velocity.properties

12802	17.4.4.2.

12803
FreeMarker

1280417.4.5.

12805Bind

12806support

12807and

12808form

12809handling

12810	17.4.5.1.

12811The

12812bind

12813macros

12814	17.4.5.2.

12815Simple

12816binding

12817	17.4.5.3.

12818Form

12819input

12820
generation

12821macros

12822	17.4.5.4.

12823HTML

12824escaping

12825and

12826XHTML

12827
compliance

1282817.5.

12829XSLT

1283017.5.1.

12831My

12832First

12833Words

12834	17.5.1.1.

12835Bean

12836definitions

12837	17.5.1.2.

12838Standard

12839MVC

12840
controller

12841code

12842	17.5.1.3.

12843Convert

12844the

12845model

12846data

12847to

12848XML

12849	17.5.1.4.

12850Defining

12851the

12852view

12853
properties

12854	17.5.1.5.

12855Document

12856transformation

1285717.5.2.

12858Summary

1285917.6.

12860Document

12861views

12862(PDF/Excel)

1286317.6.1.

12864Introduction

1286517.6.2.

12866Configuration

12867and

12868setup

12869	17.6.2.1.

12870Document

12871view

12872definitions

12873	17.6.2.2.

12874
Controller

12875code

12876	17.6.2.3.

12877Subclassing

12878for

12879Excel

12880views

12881	17.6.2.4.

12882Subclassing

12883for

12884PDF

12885views

1288617.7.

12887JasperReports

1288817.7.1.

12889Dependencies

1289017.7.2.

12891Configuration

12892	17.7.2.1.

12893Configuring

12894the

12895ViewResolver

12896	17.7.2.2.

12897Configuring

12898the

12899Views

12900	17.7.2.3.

12901About

12902Report

12903Files

12904	17.7.2.4.

12905Using
%
12906JasperReportsMultiFormatView

1290717.7.3.

12908
Populating

12909the

12910ModelAndView

1291117.7.4.

12912Working

12913with

12914Sub-Reports

12915	17.7.4.1.

12916Configuring

12917
Sub-Report

12918Files

12919	17.7.4.2.

12920Configuring

12921
Sub-Report

12922Data

12923Sources

1292417.7.5.

12925Configuring

12926Exporter

12927
Parameters

1292817.8.

12929Feed

12930Views

1293117.9.

12932XML

12933Marshalling

12934View

1293517.10.

12936JSON

12937Mapping

12938View

1293918.

12940Integrating

12941with

12942other

12943web

12944
frameworks

1294518.1.

12946Introduction

1294718.2.

12948Common

12949configuration

1295018.3.

12951
JavaServer

12952Faces

129531.1

12954and

129551.2

1295618.3.1.
#
12957DelegatingVariableResolver

12958(JSF

129591.1/1.2)

1296018.3.2.
#
12961SpringBeanVariableResolver

12962(JSF

129631.1/1.2)

1296418.3.3.
"
12965SpringBeanFacesELResolver

12966(JSF

129671.2+)

1296818.3.4.

12969FacesContextUtils

1297018.4.

12971Apache

12972Struts

129731.x

12974and

129752.x

1297618.4.1.

12977ContextLoaderPlugin

12978	18.4.1.1.
#
12979DelegatingRequestProcessor

12980	18.4.1.2.

12981DelegatingActionProxy

1298218.4.2.

12983ActionSupport

12984Classes

1298518.5.

12986WebWork

129872.x

1298818.6.

12989Tapestry

129903.x

12991and

129924.x

1299318.6.1.

12994	Injecting

12995Spring-managed

12996beans

12997	18.6.1.1.

12998
Dependency

12999	Injecting

13000Spring

13001Beans

13002into

13003Tapestry

13004pages

13005	18.6.1.2.

13006	Component

13007
definition

13008files

13009	18.6.1.3.

13010Adding

13011abstract

13012	accessors

13013	18.6.1.4.

13014
Dependency

13015	Injecting

13016Spring

13017Beans

13018into

13019Tapestry

13020pages


13021-

13022Tapestry

130234.x

13024style

1302518.7.

13026Further

13027	Resources

1302819.

13029Portlet

13030MVC

13031	Framework

1303219.1.

13033Introduction

1303419.1.1.

13035Controllers


13036-

13037The


13038C

13039in

13040MVC

1304119.1.2.

13042Views


13043-

13044The


13045V

13046in

13047MVC

1304819.1.3.

13049
Web-scoped

13050beans

1305119.2.

13052The

13053DispatcherPortlet

1305419.3.

13055The

13056ViewRendererServlet

1305719.4.

13058Controllers

1305919.4.1.

13060AbstractController

13061and
 
13062PortletContentGenerator

1306319.4.2.

13064Other

13065simple

13066controllers

1306719.4.3.

13068Command

13069Controllers

1307019.4.4.
"
13071PortletWrappingController

1307219.5.

13073Handler

13074mappings

1307519.5.1.
"
13076PortletModeHandlerMapping

1307719.5.2.
 
13078ParameterHandlerMapping

1307919.5.3.
+
13080"PortletModeParameterHandlerMapping

1308119.5.4.

13082Adding

13083HandlerInterceptors

1308419.5.5.
"
13085HandlerInterceptorAdapter

1308619.5.6.
$
13087ParameterMappingInterceptor

1308819.6.

13089Views

13090and

13091	resolving

13092them

1309319.7.

13094	Multipart

13095(file

13096upload)

13097support

1309819.7.1.

13099Using

13100the
!
13101PortletMultipartResolver

1310219.7.2.

13103Handling


13104a

13105file

13106upload

13107in


13108a

13109form

1311019.8.

13111Handling

13112
exceptions

1311319.9.

13114Annotation-based

13115
controller

13116configuration

1311719.9.1.

13118Setting

13119up

13120the

13121
dispatcher

13122for

13123
annotation

13124support

1312519.9.2.

13126Defining


13127a

13128
controller

13129with

13130@Controller

1313119.9.3.

13132Mapping

13133requests

13134with

13135@RequestMapping

1313619.9.4.

13137	Supported

13138handler

13139method

13140	arguments

1314119.9.5.

13142Binding

13143request

13144
parameters

13145to

13146method

13147
parameters

13148with

13149@RequestParam

1315019.9.6.

13151	Providing


13152a

13153link

13154to

13155data

13156from

13157the

13158model

13159with

13160@ModelAttribute

1316119.9.7.

13162
Specifying

13163
attributes

13164to

13165store

13166in


13167a

13168Session

13169with

13170@SessionAttributes

1317119.9.8.

13172Customizing

13173WebDataBinder

13174initialization

13175	19.9.8.1.

13176Customizing

13177data

13178binding

13179with

13180@InitBinder

13181	19.9.8.2.

13182Configuring


13183a

13184custom

13185WebBindingInitializer

1318619.10.

13187Portlet

13188application

13189
deployment

13190VI.

13191Integration

1319220.

13193Remoting

13194and

13195web

13196services

13197using

13198Spring

1319920.1.

13200Introduction

1320120.2.

13202Exposing

13203services

13204using

13205RMI

1320620.2.1.

13207	Exporting

13208the

13209service

13210using

13211the

13212RmiServiceExporter

1321320.2.2.

13214Linking

13215in

13216the

13217service

13218at

13219the

13220client

1322120.3.

13222Using

13223Hessian

13224or

13225Burlap

13226to

13227remotely

13228call

13229services

13230via

13231HTTP

1323220.3.1.

13233Wiring

13234up

13235the

13236DispatcherServlet

13237for

13238Hessian

13239and

13240co.

1324120.3.2.

13242Exposing

13243your

13244beans

13245by

13246using

13247the

13248HessianServiceExporter

1324920.3.3.

13250Linking

13251in

13252the

13253service

13254on

13255the

13256client

1325720.3.4.

13258Using

13259Burlap

1326020.3.5.

13261Applying

13262HTTP

13263basic

13264authentication

13265to


13266a

13267service

13268exposed

13269through

13270Hessian

13271or

13272Burlap

1327320.4.

13274Exposing

13275services

13276using

13277HTTP

13278invokers

1327920.4.1.

13280Exposing

13281the

13282service

13283object

1328420.4.2.

13285Linking

13286in

13287the

13288service

13289at

13290the

13291client

1329220.5.

13293Web

13294services

1329520.5.1.

13296Exposing

13297servlet-based

13298web

13299services

13300using

13301JAX-RPC

1330220.5.2.

13303	Accessing

13304web

13305services

13306using

13307JAX-RPC

1330820.5.3.

13309Registering

13310JAX-RPC

13311Bean

13312Mappings

1331320.5.4.

13314Registering

13315your

13316own

13317JAX-RPC

13318Handler

1331920.5.5.

13320Exposing

13321servlet-based

13322web

13323services

13324using

13325JAX-WS

1332620.5.6.

13327	Exporting

13328
standalone

13329web

13330services

13331using

13332JAX-WS

1333320.5.7.

13334	Exporting

13335web

13336services

13337using

13338the

13339JAX-WS

13340RI's

13341Spring

13342support

1334320.5.8.

13344	Accessing

13345web

13346services

13347using

13348JAX-WS

1334920.6.

13350JMS

1335120.6.1.

13352Server-side

13353configuration

1335420.6.2.

13355Client-side

13356configuration

1335720.7.

13358Auto-detection

13359is

13360not

13361implemented

13362for

13363remote

13364
interfaces

1336520.8.

13366Considerations

13367when

13368choosing


13369a

13370
technology

1337120.9.

13372	Accessing

13373RESTful

13374services

13375on

13376the

13377Client

1337820.9.1.

13379RestTemplate

13380	20.9.1.1.

13381Dealing

13382with

13383request

13384and

13385response

13386headers

1338720.9.2.

13388HTTP

13389Message

13390
Conversion

13391	20.9.2.1.
#
13392StringHttpMessageConverter

13393	20.9.2.2.
!
13394FormHttpMessageConverter

13395	20.9.2.3.
"
13396ByteArrayMessageConverter

13397	20.9.2.4.
(
13398MarshallingHttpMessageConverter

13399	20.9.2.5.
+
13400"MappingJacksonHttpMessageConverter

13401	20.9.2.6.
#
13402SourceHttpMessageConverter

13403	20.9.2.7.
*
13404!BufferedImageHttpMessageConverter

1340521.

13406
Enterprise

13407	JavaBeans

13408(EJB)

13409integration

1341021.1.

13411Introduction

1341221.2.

13413	Accessing

13414EJBs

1341521.2.1.

13416Concepts

1341721.2.2.

13418	Accessing

13419local

13420SLSBs

1342121.2.3.

13422	Accessing

13423remote

13424SLSBs

1342521.2.4.

13426	Accessing

13427EJB

134282.x

13429SLSBs

13430versus

13431EJB


134323

13433SLSBs

1343421.3.

13435Using

13436Spring's

13437EJB

13438implementation

13439support

13440classes

1344121.3.1.

13442EJB

134432.x

13444base

13445classes

1344621.3.2.

13447EJB


134483

13449	injection

13450interceptor

1345122.

13452JMS

13453(Java

13454Message

13455Service)

1345622.1.

13457Introduction

1345822.2.

13459Using

13460Spring

13461JMS

1346222.2.1.

13463JmsTemplate

1346422.2.2.

13465Connections

13466	22.2.2.1.

13467Caching

13468	Messaging

13469	Resources

13470	22.2.2.2.
 
13471SingleConnectionFactory

13472	22.2.2.3.
!
13473CachingConnectionFactory

1347422.2.3.

13475Destination

13476
Management

1347722.2.4.

13478Message

13479Listener

13480
Containers

13481	22.2.4.1.
'
13482SimpleMessageListenerContainer

13483	22.2.4.2.
(
13484DefaultMessageListenerContainer

1348522.2.5.

13486Transaction

13487
management

1348822.3.

13489Sending


13490a

13491Message

1349222.3.1.

13493Using

13494Message

13495
Converters

1349622.3.2.

13497SessionCallback

13498and

13499ProducerCallback

1350022.4.

13501	Receiving


13502a

13503message

1350422.4.1.

13505Synchronous

13506	Reception

1350722.4.2.

13508Asynchronous

13509	Reception


13510-

13511Message-Driven

13512POJOs

1351322.4.3.

13514The
$
13515SessionAwareMessageListener

13516	interface

1351722.4.4.

13518The

13519MessageListenerAdapter

1352022.4.5.

13521
Processing

13522messages

13523within

13524transactions

1352522.5.

13526Support

13527for

13528JCA

13529Message

13530	Endpoints

1353122.6.

13532JMS

13533	Namespace

13534Support

1353523.

13536JMX

1353723.1.

13538Introduction

1353923.2.

13540	Exporting

13541your

13542beans

13543to

13544JMX

1354523.2.1.

13546Creating

13547an

13548MBeanServer

1354923.2.2.

13550Reusing

13551an

13552existing

13553MBeanServer

1355423.2.3.

13555Lazy-initialized

13556MBeans

1355723.2.4.

13558	Automatic

13559registration

13560of

13561MBeans

1356223.2.5.

13563Controlling

13564the

13565registration

13566behavior

1356723.3.

13568Controlling

13569the

13570
management

13571	interface

13572of

13573your

13574beans

1357523.3.1.

13576The

13577MBeanInfoAssembler

13578	Interface

1357923.3.2.

13580Using

13581Source-Level

13582Metadata

13583(JDK

135845.0

13585annotations)

1358623.3.3.

13587Source-Level

13588Metadata

13589Types

1359023.3.4.

13591The
,
13592#AutodetectCapableMBeanInfoAssembler

13593	interface

1359423.3.5.

13595Defining

13596
management

13597
interfaces

13598using

13599Java

13600
interfaces

1360123.3.6.

13602Using
*
13603!MethodNameBasedMBeanInfoAssembler

1360423.4.

13605Controlling

13606the

13607ObjectNames

13608for

13609your

13610beans

1361123.4.1.

13612Reading

13613ObjectNames

13614from

13615
Properties

1361623.4.2.

13617Using

13618the

13619MetadataNamingStrategy

1362023.4.3.

13621The
 
13622<context:mbean-export/>

13623element

1362423.5.

13625JSR-160

13626
Connectors

1362723.5.1.

13628Server-side

13629
Connectors

1363023.5.2.

13631Client-side

13632
Connectors

1363323.5.3.

13634JMX

13635over

13636Burlap/Hessian/SOAP

1363723.6.

13638	Accessing

13639MBeans

13640via

13641Proxies

1364223.7.

13643Notifications

1364423.7.1.

13645Registering

13646	Listeners

13647for

13648Notifications

1364923.7.2.

13650
Publishing

13651Notifications

1365223.8.

13653Further

13654	Resources

1365524.

13656JCA

13657CCI

1365824.1.

13659Introduction

1366024.2.

13661Configuring

13662CCI

1366324.2.1.

13664	Connector

13665configuration

1366624.2.2.

13667ConnectionFactory

13668configuration

13669in

13670Spring

1367124.2.3.

13672Configuring

13673CCI

13674connections

1367524.2.4.

13676Using


13677a

13678single

13679CCI

13680
connection

1368124.3.

13682Using

13683Spring's

13684CCI

13685access

13686support

1368724.3.1.

13688Record

13689
conversion

1369024.3.2.

13691The

13692CciTemplate

1369324.3.3.

13694DAO

13695support

1369624.3.4.

13697	Automatic

13698output

13699record

13700
generation

1370124.3.5.

13702Summary

1370324.3.6.

13704Using


13705a

13706CCI

13707
Connection

13708and

13709Interaction

13710directly

1371124.3.7.

13712Example

13713for

13714CciTemplate

13715usage

1371624.4.

13717Modeling

13718CCI

13719access

13720as

13721	operation

13722objects

1372324.4.1.

13724MappingRecordOperation

1372524.4.2.
!
13726MappingCommAreaOperation

1372724.4.3.

13728	Automatic

13729output

13730record

13731
generation

1373224.4.4.

13733Summary

1373424.4.5.

13735Example

13736for

13737MappingRecordOperation

13738usage

1373924.4.6.

13740Example

13741for
!
13742MappingCommAreaOperation

13743usage

1374424.5.

13745Transactions

1374625.

13747Email

1374825.1.

13749Introduction

1375025.2.

13751Usage

1375225.2.1.

13753Basic

13754
MailSender

13755and

13756SimpleMailMessage

13757usage

1375825.2.2.

13759Using

13760the

13761JavaMailSender

13762and

13763the

13764MimeMessagePreparator

1376525.3.

13766Using

13767the

13768JavaMail

13769MimeMessageHelper

1377025.3.1.

13771Sending

13772attachments

13773and

13774inline

13775	resources

13776	25.3.1.1.

13777Attachments

13778	25.3.1.2.

13779Inline

13780	resources

1378125.3.2.

13782Creating

13783email

13784content

13785using


13786a

13787
templating

13788library

13789	25.3.2.1.


13790A

13791Velocity-based

13792example

1379326.

13794Task

13795	Execution

13796and

13797
Scheduling

1379826.1.

13799Introduction

1380026.2.

13801The

13802Spring

13803TaskExecutor

13804abstraction

1380526.2.1.

13806TaskExecutor

13807types

1380826.2.2.

13809Using


13810a

13811TaskExecutor

1381226.3.

13813The

13814Spring

13815TaskScheduler

13816abstraction

1381726.3.1.

13818The

13819Trigger

13820	interface

1382126.3.2.

13822Trigger

13823implementations

1382426.3.3.

13825TaskScheduler

13826implementations

1382726.4.

13828The

13829Task

13830	Namespace

1383126.4.1.

13832The

13833'scheduler'

13834element

1383526.4.2.

13836The

13837
'executor'

13838element

1383926.4.3.

13840The

13841'scheduled-tasks'

13842element

1384326.5.

13844
Annotation

13845Support

13846for

13847
Scheduling

13848and

13849Asynchronous

13850	Execution

1385126.5.1.

13852The

13853
@Scheduled

13854
Annotation

1385526.5.2.

13856The

13857@Async

13858
Annotation

1385926.5.3.

13860The

13861<annotation-driven>

13862Element

1386326.6.

13864Using

13865the

13866OpenSymphony

13867Quartz

13868	Scheduler

1386926.6.1.

13870Using

13871the

13872JobDetailBean

1387326.6.2.

13874Using

13875the
+
13876"MethodInvokingJobDetailFactoryBean

1387726.6.3.

13878Wiring

13879up

13880jobs

13881using

13882triggers

13883and

13884the

13885SchedulerFactoryBean

1388626.7.

13887Using

13888JDK

13889Timer

13890support

1389126.7.1.

13892Creating

13893custom

13894timers

1389526.7.2.

13896Using

13897the
+
13898"MethodInvokingTimerTaskFactoryBean

1389926.7.3.

13900Wrapping

13901up:

13902setting

13903up

13904the

13905tasks

13906using

13907the

13908TimerFactoryBean

1390927.

13910Dynamic

13911language

13912support

1391327.1.

13914Introduction

1391527.2.


13916A

13917first

13918example

1391927.3.

13920Defining

13921beans

13922that

13923are

13924backed

13925by

13926dynamic

13927	languages

1392827.3.1.

13929Common

13930concepts

13931	27.3.1.1.

13932The

13933<lang:language/>

13934element

13935	27.3.1.2.

13936Refreshable

13937beans

13938	27.3.1.3.

13939Inline

13940dynamic

13941language

13942source

13943files

13944	27.3.1.4.

13945Understanding

13946Constructor

13947	Injection

13948in

13949the

13950context

13951of
 
13952dynamic-language-backed

13953beans

1395427.3.2.

13955JRuby

13956beans

1395727.3.3.

13958Groovy

13959beans

13960	27.3.3.1.

13961Customising

13962Groovy

13963objects

13964via


13965a

13966callback

1396727.3.4.

13968	BeanShell

13969beans

1397027.4.

13971	Scenarios

1397227.4.1.

13973Scripted

13974Spring

13975MVC

13976Controllers

1397727.4.2.

13978Scripted

13979
Validators

1398027.5.

13981Bits

13982and

13983bobs

1398427.5.1.

13985AOP


13986-

13987advising

13988scripted

13989beans

1399027.5.2.

13991Scoping

1399227.6.

13993Further

13994	Resources

1399528.

13996Cache

13997Abstraction

1399828.1.

13999Introduction

1400028.2.

14001Understanding

14002the

14003cache

14004abstraction

1400528.3.

14006Declarative

14007annotation-based

14008caching

1400928.3.1.

14010
@Cacheable

14011
annotation

14012	28.3.1.1.

14013Default

14014Key

14015
Generation

14016	28.3.1.2.

14017Custom

14018Key

14019
Generation

14020Declaration

14021	28.3.1.3.

14022Conditional

14023caching

14024	28.3.1.4.

14025	Available

14026caching

14027SpEL

14028
evaluation

14029context

1403028.3.2.

14031@CacheEvict

14032
annotation

1403328.3.3.

14034Enable

14035caching

14036annotations

1403728.3.4.

14038Using

14039custom

14040annotations

1404128.4.

14042Configuring

14043the

14044cache

14045storage

1404628.4.1.

14047JDK

14048ConcurrentMap-based

14049Cache

1405028.4.2.

14051Ehcache-based

14052Cache

1405328.5.

14054Plugging-in

14055	different

14056back-end

14057caches

14058VII.

14059
Appendices

14060A.

14061Classic

14062Spring

14063Usage

14064A.1.

14065Classic

14066ORM

14067usage

14068A.1.1.

14069	Hibernate

14070A.1.1.1.

14071The

14072HibernateTemplate

14073A.1.1.2.

14074Implementing

14075Spring-based

14076DAOs

14077without

14078	callbacks

14079A.1.2.

14080JDO

14081A.1.2.1.

14082JdoTemplate

14083and

14084JdoDaoSupport

14085A.1.3.

14086JPA

14087A.1.3.1.

14088JpaTemplate

14089and

14090JpaDaoSupport

14091A.2.

14092Classic

14093Spring

14094MVC

14095A.3.

14096JMS

14097Usage

14098A.3.1.

14099JmsTemplate

14100A.3.2.

14101Asynchronous

14102Message

14103	Reception

14104A.3.3.

14105Connections

14106A.3.4.

14107Transaction

14108
Management

14109B.

14110Classic

14111Spring

14112AOP

14113Usage

14114B.1.

14115Pointcut

14116API

14117in

14118Spring

14119B.1.1.

14120Concepts

14121B.1.2.

14122
Operations

14123on

14124	pointcuts

14125B.1.3.

14126AspectJ

14127
expression

14128	pointcuts

14129B.1.4.

14130Convenience

14131pointcut

14132implementations

14133B.1.4.1.

14134Static

14135	pointcuts

14136B.1.4.2.

14137Dynamic

14138	pointcuts

14139B.1.5.

14140Pointcut

14141superclasses

14142B.1.6.

14143Custom

14144	pointcuts

14145B.2.

14146Advice

14147API

14148in

14149Spring

14150B.2.1.

14151Advice

14152
lifecycles

14153B.2.2.

14154Advice

14155types

14156in

14157Spring

14158B.2.2.1.

14159Interception

14160around

14161advice

14162B.2.2.2.

14163Before

14164advice

14165B.2.2.3.

14166Throws

14167advice

14168B.2.2.4.

14169After

14170	Returning

14171advice

14172B.2.2.5.

14173Introduction

14174advice

14175B.3.

14176Advisor

14177API

14178in

14179Spring

14180B.4.

14181Using

14182the

14183ProxyFactoryBean

14184to

14185create

14186AOP

14187proxies

14188B.4.1.

14189Basics

14190B.4.2.

14191JavaBean

14192
properties

14193B.4.3.

14194JDK-

14195and

14196CGLIB-based

14197proxies

14198B.4.4.

14199Proxying

14200
interfaces

14201B.4.5.

14202Proxying

14203classes

14204B.4.6.

14205Using

14206'global'

14207advisors

14208B.5.

14209Concise

14210proxy

14211definitions

14212B.6.

14213Creating

14214AOP

14215proxies

14216programmatically

14217with

14218the

14219ProxyFactory

14220B.7.

14221Manipulating

14222advised

14223objects

14224B.8.

14225Using

14226the

14227"autoproxy"

14228facility

14229B.8.1.

14230	Autoproxy

14231bean

14232definitions

14233B.8.1.1.
!
14234BeanNameAutoProxyCreator

14235B.8.1.2.
'
14236DefaultAdvisorAutoProxyCreator

14237B.8.1.3.
(
14238AbstractAdvisorAutoProxyCreator

14239B.8.2.

14240Using

14241metadata-driven

14242auto-proxying

14243B.9.

14244Using

14245TargetSources

14246B.9.1.

14247Hot

14248	swappable

14249target

14250sources

14251B.9.2.

14252Pooling

14253target

14254sources

14255B.9.3.

14256	Prototype

14257target

14258sources

14259B.9.4.

14260ThreadLocal

14261target

14262sources

14263B.10.

14264Defining

14265new

14266Advice

14267types

14268B.11.

14269Further

14270	resources

14271C.

14272XML

14273Schema-based

14274configuration

14275C.1.

14276Introduction

14277C.2.

14278XML

14279Schema-based

14280configuration

14281C.2.1.

14282Referencing

14283the

14284schemas

14285C.2.2.

14286The

14287util

14288schema

14289C.2.2.1.

14290<util:constant/>

14291C.2.2.2.

14292<util:property-path/>

14293C.2.2.3.

14294<util:properties/>

14295C.2.2.4.

14296<util:list/>

14297C.2.2.5.

14298<util:map/>

14299C.2.2.6.

14300<util:set/>

14301C.2.3.

14302The

14303jee

14304schema

14305C.2.3.1.

14306<jee:jndi-lookup/>

14307(simple)

14308C.2.3.2.

14309<jee:jndi-lookup/>

14310(with

14311single

14312JNDI

14313environment

14314setting)

14315C.2.3.3.

14316<jee:jndi-lookup/>

14317(with

14318multiple

14319JNDI

14320environment

14321	settings)

14322C.2.3.4.

14323<jee:jndi-lookup/>

14324	(complex)

14325C.2.3.5.

14326<jee:local-slsb/>

14327(simple)

14328C.2.3.6.

14329<jee:local-slsb/>

14330	(complex)

14331C.2.3.7.

14332<jee:remote-slsb/>

14333C.2.4.

14334The

14335lang

14336schema

14337C.2.5.

14338The

14339jms

14340schema

14341C.2.6.

14342The

14343tx

14344(transaction)

14345schema

14346C.2.7.

14347The

14348aop

14349schema

14350C.2.8.

14351The

14352context

14353schema

14354C.2.8.1.
 
14355<property-placeholder/>

14356C.2.8.2.

14357<annotation-config/>

14358C.2.8.3.

14359<component-scan/>

14360C.2.8.4.

14361<load-time-weaver/>

14362C.2.8.5.

14363<spring-configured/>

14364C.2.8.6.

14365<mbean-export/>

14366C.2.9.

14367The

14368tool

14369schema

14370C.2.10.

14371The

14372beans

14373schema

14374D.

14375
Extensible

14376XML

14377	authoring

14378D.1.

14379Introduction

14380D.2.

14381	Authoring

14382the

14383schema

14384D.3.

14385Coding


14386a

14387NamespaceHandler

14388D.4.

14389Coding


14390a

14391BeanDefinitionParser

14392D.5.

14393Registering

14394the

14395handler

14396and

14397the

14398schema

14399D.5.1.
#
14400'META-INF/spring.handlers'

14401D.5.2.
"
14402'META-INF/spring.schemas'

14403D.6.

14404Using


14405a

14406custom

14407	extension

14408in

14409your

14410Spring

14411XML

14412configuration

14413D.7.

14414Meatier

14415examples

14416D.7.1.

14417Nesting

14418custom

14419tags

14420within

14421custom

14422tags

14423D.7.2.

14424Custom

14425
attributes

14426on

14427'normal'

14428elements

14429D.8.

14430Further

14431	Resources

14432E.

14433spring-beans-2.0.dtd

14434F.

14435
spring.tld

14436F.1.

14437Introduction

14438F.2.

14439The

14440bind

14441tag

14442F.3.

14443The

14444
escapeBody

14445tag

14446F.4.

14447The

14448hasBindErrors

14449tag

14450F.5.

14451The

14452
htmlEscape

14453tag

14454F.6.

14455The

14456message

14457tag

14458F.7.

14459The

14460
nestedPath

14461tag

14462F.8.

14463The

14464theme

14465tag

14466F.9.

14467The

14468	transform

14469tag

14470F.10.

14471The

14472url

14473tag

14474F.11.

14475The

14476eval

14477tag

14478G.

14479spring-form.tld

14480G.1.

14481Introduction

14482G.2.

14483The

14484checkbox

14485tag

14486G.3.

14487The

14488
checkboxes

14489tag

14490G.4.

14491The

14492errors

14493tag

14494G.5.

14495The

14496form

14497tag

14498G.6.

14499The

14500hidden

14501tag

14502G.7.

14503The

14504input

14505tag

14506G.8.

14507The

14508label

14509tag

14510G.9.

14511The

14512option

14513tag

14514G.10.

14515The

14516options

14517tag

14518G.11.

14519The

14520password

14521tag

14522G.12.

14523The

14524radiobutton

14525tag

14526G.13.

14527The

14528radiobuttons

14529tag

14530G.14.

14531The

14532select

14533tag

14534G.15.

14535The

14536textarea

14537tag

14538Next

14539Part

14540I.

14541Overview

14542of

14543Spring

14544	Framework